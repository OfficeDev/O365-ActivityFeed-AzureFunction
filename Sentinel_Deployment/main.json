{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.17.1.54307",
      "templateHash": "7697758976230267439"
    }
  },
  "parameters": {
    "FunctionAppName": {
      "type": "string",
      "defaultValue": "fa-sentineldlp-[Replace with globally unique identifier]",
      "metadata": {
        "description": "A globally unique name for the Function App to be created which will run the code to ingest DLP data into Sentinel."
      }
    },
    "DeployApplicationInsights": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Select to enable Application Insights for the Function App. This will allow you to monitor the status of the Function App for any errors. The Log Analytics Workspace specified in the \"Log Analytics Resource Id\" Parameter will be used to store the Application Insights data."
      }
    },
    "KeyVaultName": {
      "type": "string",
      "defaultValue": "kv-sentineldlp-[Replace with globally unique identifier]",
      "metadata": {
        "description": "A globally unique name for the Key Vault to be created which will store Function App secrets."
      }
    },
    "StorageAccountName": {
      "type": "string",
      "defaultValue": "stsentineldlp[Replace with globally unique identifier]",
      "metadata": {
        "description": "A globally unique name for the Function App Storage Account. Must be between 3 and 24 characters in length and use numbers and lower-case letters only."
      }
    },
    "TenantID": {
      "type": "string",
      "defaultValue": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
      "metadata": {
        "description": "Azure AD tenant ID in which DLP instance resides."
      }
    },
    "ClientID": {
      "type": "string",
      "defaultValue": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
      "metadata": {
        "description": "App Registration Client ID."
      }
    },
    "ClientSecret": {
      "type": "securestring",
      "metadata": {
        "description": "App Registration Client secret."
      }
    },
    "InternalDomainNames": {
      "type": "string",
      "defaultValue": "youradditionaldomain.com,yourdomain.com,yourtenant.onmicrosoft.com",
      "metadata": {
        "description": "Internal domain names for your organization to better determine the source of email messages."
      }
    },
    "DataCollectionEndpointName": {
      "type": "string",
      "defaultValue": "dce-sentineldlp",
      "metadata": {
        "description": "Name for Data Collection Endpoint to be created which is used to ingest data into Log Analytics workspace."
      }
    },
    "DataCollectionRuleName": {
      "type": "string",
      "defaultValue": "dcr-sentineldlp",
      "metadata": {
        "description": "Name for Data Collection Rule to be created which is used to ingest data into Log Analytics workspace."
      }
    },
    "LogAnalyticsWorkspaceResourceID": {
      "type": "string",
      "defaultValue": "/subscriptions/xxxxxxxx-xxxxxxxx-xxxxxxxx-xxxxxxxx-xxxxxxxx/resourcegroups/xxxxxxxx/providers/microsoft.operationalinsights/workspaces/xxxxxxxx",
      "metadata": {
        "description": "Azure Resource ID of the existing Log Analytics Workspace where you would like the DLP and optional Function App Application Insights data to reside. The format is: \"/subscriptions/xxxxxxxx-xxxxxxxx-xxxxxxxx-xxxxxxxx-xxxxxxxx/resourcegroups/xxxxxxxx/providers/microsoft.operationalinsights/workspaces/xxxxxxxx\""
      }
    },
    "LogAnalyticsWorkspaceLocation": {
      "type": "string",
      "allowedValues": [
        "asia",
        "asiapacific",
        "australia",
        "australiacentral",
        "australiacentral2",
        "australiaeast",
        "australiasoutheast",
        "brazil",
        "brazilsouth",
        "brazilsoutheast",
        "canada",
        "canadacentral",
        "canadaeast",
        "centralindia",
        "centralus",
        "centraluseuap",
        "eastasia",
        "eastus",
        "eastus2",
        "eastus2euap",
        "europe",
        "france",
        "francecentral",
        "francesouth",
        "germany",
        "germanynorth",
        "germanywestcentral",
        "global",
        "india",
        "japan",
        "japaneast",
        "japanwest",
        "korea",
        "koreacentral",
        "koreasouth",
        "northcentralus",
        "northeurope",
        "norway",
        "norwayeast",
        "norwaywest",
        "qatarcentral",
        "southafrica",
        "southafricanorth",
        "southafricawest",
        "southcentralus",
        "southeastasia",
        "southindia",
        "swedencentral",
        "switzerland",
        "switzerlandnorth",
        "switzerlandwest",
        "uaecentral",
        "uaenorth",
        "uksouth",
        "ukwest",
        "unitedstates",
        "westcentralus",
        "westeurope",
        "westindia",
        "westus",
        "westus2",
        "westus3"
      ],
      "metadata": {
        "description": "Azure location/region of the Log Analytics Workspace referenced in the LogAnalyticsWorkspaceResourceID parameter."
      }
    },
    "DLPPolicySync": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Create a Sentinel scheduled query rule for each DLP policy and workload (i.e., Teams, SharePoint, Endpoint, etc.). If \"false\", a single scheduled query rule will be created to cover all policies and workloads."
      }
    },
    "DeployWorkbooks": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploy Azure workbooks to help visualize the DLP data and manage DLP incidents."
      }
    },
    "DeployFunctionCode": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Use the Azure Deployment Script resource to automatically deploy the Function App code. This requires the Microsoft.ContainerInstance resource provider to be registred on the subsription."
      }
    },
    "SensitiveDataHandling": {
      "type": "string",
      "defaultValue": "Hash",
      "allowedValues": [
        "Keep",
        "Hash",
        "Remove"
      ],
      "metadata": {
        "description": "Ingest the sensitive data detected by DLP rules into Log Analytics workpace."
      }
    }
  },
  "variables": {
    "location": "[resourceGroup().location]",
    "functionAppPackageUri": "https://raw.githubusercontent.com/anders-alex/O365-ActivityFeed-AzureFunction/Sentinel_Deployment/Sentinel_Deployment/functionPackage.zip",
    "deploymentScriptUri": "https://raw.githubusercontent.com/anders-alex/O365-ActivityFeed-AzureFunction/Sentinel_Deployment/Sentinel_Deployment/deploymentScript.ps1"
  },
  "resources": [
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2022-01-31-preview",
      "name": "[format('uami-{0}', parameters('FunctionAppName'))]",
      "location": "[variables('location')]"
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-08-01",
      "name": "[parameters('StorageAccountName')]",
      "location": "[variables('location')]",
      "kind": "StorageV2",
      "sku": {
        "name": "Standard_LRS"
      },
      "properties": {
        "allowBlobPublicAccess": false
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'createCustomTables')]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}/default/{1}', parameters('StorageAccountName'), toLower(parameters('FunctionAppName')))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('StorageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/queueServices/queues",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}/default/dlpqueue', parameters('StorageAccountName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('StorageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2022-07-01",
      "name": "[parameters('KeyVaultName')]",
      "location": "[variables('location')]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "premium"
        },
        "tenantId": "[subscription().tenantId]",
        "accessPolicies": [
          {
            "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName'))), '2022-01-31-preview').principalId]",
            "permissions": {
              "secrets": [
                "get",
                "set",
                "list",
                "delete"
              ]
            },
            "tenantId": "[subscription().tenantId]"
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName')))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2022-07-01",
      "name": "[format('{0}/{1}', parameters('KeyVaultName'), 'StorageAccountConnectionString')]",
      "properties": {
        "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', parameters('StorageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('StorageAccountName')), '2021-08-01').keys[0].value)]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('KeyVaultName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('StorageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2022-07-01",
      "name": "[format('{0}/{1}', parameters('KeyVaultName'), 'ClientSecret')]",
      "properties": {
        "value": "[parameters('ClientSecret')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('KeyVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2021-03-01",
      "name": "[parameters('FunctionAppName')]",
      "location": "[variables('location')]",
      "sku": {
        "name": "Y1",
        "tier": "Dynamic"
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2022-03-01",
      "name": "[parameters('FunctionAppName')]",
      "location": "[variables('location')]",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName'))))]": {}
        }
      },
      "kind": "functionapp",
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('FunctionAppName'))]",
        "keyVaultReferenceIdentity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName')))]",
        "httpsOnly": true,
        "clientCertEnabled": true,
        "clientCertMode": "OptionalInteractiveUser",
        "siteConfig": {
          "appSettings": [
            {
              "name": "AzureWebJobsStorage",
              "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName=StorageAccountConnectionString)', parameters('KeyVaultName'))]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName=StorageAccountConnectionString)', parameters('KeyVaultName'))]"
            },
            {
              "name": "AzureWebJobsSecretStorageType",
              "value": "keyvault"
            },
            {
              "name": "AzureWebJobsSecretStorageKeyVaultUri",
              "value": "[format('https://{0}.vault.azure.net/', parameters('KeyVaultName'))]"
            },
            {
              "name": "AzureWebJobsSecretStorageKeyVaultClientId",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName'))), '2022-01-31-preview').clientId]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[toLower(parameters('FunctionAppName'))]"
            },
            {
              "name": "WEBSITE_SKIP_CONTENTSHARE_VALIDATION",
              "value": "1"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~4"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[if(equals(parameters('DeployApplicationInsights'), true()), reference(resourceId('Microsoft.Insights/components', format('appInsights-{0}', parameters('FunctionAppName'))), '2020-02-02').InstrumentationKey, '')]"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "powershell"
            },
            {
              "name": "WEBSITE_RUN_FROM_PACKAGE",
              "value": "0"
            },
            {
              "name": "AzureWebJobs.SyncDLPAnalyticsRules.Disabled",
              "value": "[if(equals(parameters('DLPPolicySync'), false()), '1', '0')]"
            },
            {
              "name": "ClientID",
              "value": "[parameters('ClientID')]"
            },
            {
              "name": "ClientSecret",
              "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName=ClientSecret)', parameters('KeyVaultName'))]"
            },
            {
              "name": "ContentTypes",
              "value": "DLP.ALL"
            },
            {
              "name": "customLogName",
              "value": "PurviewDLP"
            },
            {
              "name": "domains",
              "value": "[parameters('InternalDomainNames')]"
            },
            {
              "name": "storageQueue",
              "value": "dlpqueue"
            },
            {
              "name": "TenantGuid",
              "value": "[parameters('TenantID')]"
            },
            {
              "name": "SentinelWorkspace",
              "value": "[split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[8]]"
            },
            {
              "name": "UamiClientId",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName'))), '2022-01-31-preview').clientId]"
            },
            {
              "name": "DcrImmutableId",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'createCustomTables'), '2022-09-01').outputs.DcrImmutableId.value]"
            },
            {
              "name": "DceUri",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'createCustomTables'), '2022-09-01').outputs.DceUri.value]"
            },
            {
              "name": "LawResourceId",
              "value": "[parameters('LogAnalyticsWorkspaceResourceID')]"
            },
            {
              "name": "SensitiveDataHandling",
              "value": "[parameters('SensitiveDataHandling')]"
            }
          ],
          "powerShellVersion": "7.2",
          "minTlsVersion": "1.2",
          "ftpsState": "Disabled",
          "use32BitWorkerProcess": false
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', format('appInsights-{0}', parameters('FunctionAppName')))]",
        "[resourceId('Microsoft.Resources/deployments', 'createCustomTables')]",
        "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', split(format('{0}/default/{1}', parameters('StorageAccountName'), toLower(parameters('FunctionAppName'))), '/')[0], split(format('{0}/default/{1}', parameters('StorageAccountName'), toLower(parameters('FunctionAppName'))), '/')[1], split(format('{0}/default/{1}', parameters('StorageAccountName'), toLower(parameters('FunctionAppName'))), '/')[2])]",
        "[resourceId('Microsoft.Web/serverfarms', parameters('FunctionAppName'))]",
        "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('KeyVaultName'), 'StorageAccountConnectionString')]",
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('StorageAccountName'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName')))]"
      ]
    },
    {
      "condition": "[equals(parameters('DeployApplicationInsights'), true())]",
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[format('appInsights-{0}', parameters('FunctionAppName'))]",
      "location": "[variables('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "Request_Source": "rest",
        "WorkspaceResourceId": "[parameters('LogAnalyticsWorkspaceResourceID')]"
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.Web/sites/{0}', parameters('FunctionAppName'))]",
      "name": "[guid(subscription().id, resourceGroup().id, resourceId('Microsoft.Web/sites', parameters('FunctionAppName')))]",
      "properties": {
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName'))), '2022-01-31-preview').principalId]",
        "roleDefinitionId": "/providers/Microsoft.Authorization/roleDefinitions/8e3af657-a8ff-443c-a75c-2fe8c4bcb635",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('FunctionAppName'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName')))]"
      ]
    },
    {
      "condition": "[equals(parameters('DeployFunctionCode'), true())]",
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "deployCode",
      "location": "[variables('location')]",
      "kind": "AzurePowerShell",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName'))))]": {}
        }
      },
      "properties": {
        "azPowerShellVersion": "8.3",
        "retentionInterval": "PT1H",
        "timeout": "PT10M",
        "cleanupPreference": "Always",
        "environmentVariables": [
          {
            "name": "TenantId",
            "value": "[parameters('TenantID')]"
          },
          {
            "name": "ClientId",
            "value": "[parameters('ClientID')]"
          },
          {
            "name": "ClientSecret",
            "secureValue": "[parameters('ClientSecret')]"
          }
        ],
        "primaryScriptUri": "[variables('deploymentScriptUri')]",
        "arguments": "[format('-PackageUri {0} -SubscriptionId {1} -ResourceGroupName {2} -FunctionAppName {3} -FAScope {4} -UAMIPrincipalId {5}', variables('functionAppPackageUri'), split(subscription().id, '/')[2], resourceGroup().name, parameters('FunctionAppName'), resourceId('Microsoft.Web/sites', parameters('FunctionAppName')), reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName'))), '2022-01-31-preview').principalId)]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('FunctionAppName'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "createCustomTables",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "LogAnalyticsWorkspaceLocation": {
            "value": "[parameters('LogAnalyticsWorkspaceLocation')]"
          },
          "LogAnalyticsWorkspaceResourceId": {
            "value": "[parameters('LogAnalyticsWorkspaceResourceID')]"
          },
          "DataCollectionEndpointName": {
            "value": "[parameters('DataCollectionEndpointName')]"
          },
          "DataCollectionRuleName": {
            "value": "[parameters('DataCollectionRuleName')]"
          },
          "ServicePrincipalId": {
            "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName'))), '2022-01-31-preview').principalId]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "17117834295490971881"
            }
          },
          "parameters": {
            "DataCollectionEndpointName": {
              "type": "string",
              "defaultValue": "[format('dce-mdvm-{0}', uniqueString(resourceGroup().id))]",
              "metadata": {
                "description": "Name for Data Collection Endpoint used to ingest data into Log Analytics workspace."
              }
            },
            "DataCollectionRuleName": {
              "type": "string",
              "defaultValue": "[format('dcr-mdmv-{0}', uniqueString(resourceGroup().id))]",
              "metadata": {
                "description": "Name for Data Collection Rule used to ingest data into Log Analytics workspace."
              }
            },
            "LogAnalyticsWorkspaceResourceId": {
              "type": "string",
              "metadata": {
                "description": "Azure Resource Id of the Log Analytics Workspace where you like the MDVM and optional Function App Application Insights data to reside. The format is: \"/subscriptions/xxxxxxxx-xxxxxxxx-xxxxxxxx-xxxxxxxx-xxxxxxxx/resourcegroups/xxxxxxxx/providers/microsoft.operationalinsights/workspaces/xxxxxxxx\""
              }
            },
            "LogAnalyticsWorkspaceLocation": {
              "type": "string",
              "allowedValues": [
                "asia",
                "asiapacific",
                "australia",
                "australiacentral",
                "australiacentral2",
                "australiaeast",
                "australiasoutheast",
                "brazil",
                "brazilsouth",
                "brazilsoutheast",
                "canada",
                "canadacentral",
                "canadaeast",
                "centralindia",
                "centralus",
                "centraluseuap",
                "eastasia",
                "eastus",
                "eastus2",
                "eastus2euap",
                "europe",
                "france",
                "francecentral",
                "francesouth",
                "germany",
                "germanynorth",
                "germanywestcentral",
                "global",
                "india",
                "japan",
                "japaneast",
                "japanwest",
                "korea",
                "koreacentral",
                "koreasouth",
                "northcentralus",
                "northeurope",
                "norway",
                "norwayeast",
                "norwaywest",
                "qatarcentral",
                "southafrica",
                "southafricanorth",
                "southafricawest",
                "southcentralus",
                "southeastasia",
                "southindia",
                "swedencentral",
                "switzerland",
                "switzerlandnorth",
                "switzerlandwest",
                "uaecentral",
                "uaenorth",
                "uksouth",
                "ukwest",
                "unitedstates",
                "westcentralus",
                "westeurope",
                "westindia",
                "westus",
                "westus2",
                "westus3"
              ],
              "metadata": {
                "description": "Azure location/region of the Log Analytics Workspace referenced in the LogAnalyticsWorkspaceResourceId parameter."
              }
            },
            "ServicePrincipalId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional: Managed Identity or Service Principal ID to be assigned the Metrics Publisher role on the data collection rule."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Insights/dataCollectionEndpoints",
              "apiVersion": "2021-09-01-preview",
              "name": "[parameters('DataCollectionEndpointName')]",
              "location": "[parameters('LogAnalyticsWorkspaceLocation')]",
              "properties": {}
            },
            {
              "condition": "[not(equals(parameters('ServicePrincipalId'), ''))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-10-01-preview",
              "scope": "[format('Microsoft.Insights/dataCollectionRules/{0}', parameters('DataCollectionRuleName'))]",
              "name": "[guid(resourceId('Microsoft.Insights/dataCollectionRules', parameters('DataCollectionRuleName')), '/providers/Microsoft.Authorization/roleDefinitions/3913510d-42f4-4e42-8a64-420c390055eb')]",
              "properties": {
                "roleDefinitionId": "/providers/Microsoft.Authorization/roleDefinitions/3913510d-42f4-4e42-8a64-420c390055eb",
                "principalId": "[parameters('ServicePrincipalId')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Insights/dataCollectionRules', parameters('DataCollectionRuleName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/dataCollectionRules",
              "apiVersion": "2021-09-01-preview",
              "name": "[parameters('DataCollectionRuleName')]",
              "location": "[parameters('LogAnalyticsWorkspaceLocation')]",
              "properties": {
                "dataCollectionEndpointId": "[resourceId('Microsoft.Insights/dataCollectionEndpoints', parameters('DataCollectionEndpointName'))]",
                "streamDeclarations": {
                  "Custom-PurviewDLP_CL": {
                    "columns": [
                      {
                        "name": "TimeGenerated",
                        "type": "datetime"
                      },
                      {
                        "name": "CreationTime",
                        "type": "datetime"
                      },
                      {
                        "name": "Identifier",
                        "type": "string"
                      },
                      {
                        "name": "Operation",
                        "type": "string"
                      },
                      {
                        "name": "OrganizationId",
                        "type": "string"
                      },
                      {
                        "name": "RecordType",
                        "type": "int"
                      },
                      {
                        "name": "UserKey",
                        "type": "string"
                      },
                      {
                        "name": "UserType",
                        "type": "int"
                      },
                      {
                        "name": "Version",
                        "type": "int"
                      },
                      {
                        "name": "Workload",
                        "type": "string"
                      },
                      {
                        "name": "ObjectId",
                        "type": "string"
                      },
                      {
                        "name": "UserId",
                        "type": "string"
                      },
                      {
                        "name": "IncidentId",
                        "type": "string"
                      },
                      {
                        "name": "PolicyDetails",
                        "type": "dynamic"
                      },
                      {
                        "name": "SensitiveInfoDetectionIsIncluded",
                        "type": "boolean"
                      },
                      {
                        "name": "SharePointMetaData",
                        "type": "dynamic"
                      },
                      {
                        "name": "ExchangeMetaData",
                        "type": "dynamic"
                      },
                      {
                        "name": "EndpointMetaData",
                        "type": "dynamic"
                      },
                      {
                        "name": "EvidenceFile",
                        "type": "dynamic"
                      },
                      {
                        "name": "Scope",
                        "type": "int"
                      },
                      {
                        "name": "DocumentName",
                        "type": "string"
                      },
                      {
                        "name": "usageLocation",
                        "type": "string"
                      },
                      {
                        "name": "department",
                        "type": "string"
                      },
                      {
                        "name": "manager",
                        "type": "string"
                      },
                      {
                        "name": "originalContent",
                        "type": "string"
                      },
                      {
                        "name": "ExceptionInfo",
                        "type": "dynamic"
                      },
                      {
                        "name": "jobTitle",
                        "type": "string"
                      }
                    ]
                  }
                },
                "destinations": {
                  "logAnalytics": [
                    {
                      "name": "[split(parameters('LogAnalyticsWorkspaceResourceId'), '/')[8]]",
                      "workspaceResourceId": "[parameters('LogAnalyticsWorkspaceResourceId')]"
                    }
                  ]
                },
                "dataFlows": [
                  {
                    "streams": [
                      "Custom-PurviewDLP_CL"
                    ],
                    "destinations": [
                      "[split(parameters('LogAnalyticsWorkspaceResourceId'), '/')[8]]"
                    ],
                    "transformKql": "source",
                    "outputStream": "Custom-PurviewDLP_CL"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Insights/dataCollectionEndpoints', parameters('DataCollectionEndpointName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('LogAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('LogAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.Resources/deployments', 'tablePurviewDLP')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "tablePurviewDLP",
              "subscriptionId": "[split(parameters('LogAnalyticsWorkspaceResourceId'), '/')[2]]",
              "resourceGroup": "[split(parameters('LogAnalyticsWorkspaceResourceId'), '/')[4]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "lawName": {
                    "value": "[split(parameters('LogAnalyticsWorkspaceResourceId'), '/')[8]]"
                  },
                  "tableName": {
                    "value": "PurviewDLP_CL"
                  },
                  "plan": {
                    "value": "Analytics"
                  },
                  "columns": {
                    "value": [
                      {
                        "name": "TimeGenerated",
                        "type": "datetime"
                      },
                      {
                        "name": "CreationTime",
                        "type": "datetime"
                      },
                      {
                        "name": "Identifier",
                        "type": "string"
                      },
                      {
                        "name": "Operation",
                        "type": "string"
                      },
                      {
                        "name": "OrganizationId",
                        "type": "string"
                      },
                      {
                        "name": "RecordType",
                        "type": "int"
                      },
                      {
                        "name": "UserKey",
                        "type": "string"
                      },
                      {
                        "name": "UserType",
                        "type": "int"
                      },
                      {
                        "name": "Version",
                        "type": "int"
                      },
                      {
                        "name": "Workload",
                        "type": "string"
                      },
                      {
                        "name": "ObjectId",
                        "type": "string"
                      },
                      {
                        "name": "UserId",
                        "type": "string"
                      },
                      {
                        "name": "IncidentId",
                        "type": "string"
                      },
                      {
                        "name": "PolicyDetails",
                        "type": "dynamic"
                      },
                      {
                        "name": "SensitiveInfoDetectionIsIncluded",
                        "type": "boolean"
                      },
                      {
                        "name": "SharePointMetaData",
                        "type": "dynamic"
                      },
                      {
                        "name": "ExchangeMetaData",
                        "type": "dynamic"
                      },
                      {
                        "name": "EndpointMetaData",
                        "type": "dynamic"
                      },
                      {
                        "name": "EvidenceFile",
                        "type": "dynamic"
                      },
                      {
                        "name": "Scope",
                        "type": "int"
                      },
                      {
                        "name": "DocumentName",
                        "type": "string"
                      },
                      {
                        "name": "usageLocation",
                        "type": "string"
                      },
                      {
                        "name": "department",
                        "type": "string"
                      },
                      {
                        "name": "manager",
                        "type": "string"
                      },
                      {
                        "name": "originalContent",
                        "type": "string"
                      },
                      {
                        "name": "ExceptionInfo",
                        "type": "dynamic"
                      },
                      {
                        "name": "jobTitle",
                        "type": "string"
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "740931331479622398"
                    }
                  },
                  "parameters": {
                    "lawName": {
                      "type": "string"
                    },
                    "tableName": {
                      "type": "string"
                    },
                    "plan": {
                      "type": "string"
                    },
                    "columns": {
                      "type": "array"
                    },
                    "retention": {
                      "type": "int",
                      "defaultValue": -1
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.OperationalInsights/workspaces/tables",
                      "apiVersion": "2022-10-01",
                      "name": "[format('{0}/{1}', parameters('lawName'), parameters('tableName'))]",
                      "properties": {
                        "schema": {
                          "name": "[parameters('tableName')]",
                          "columns": "[parameters('columns')]"
                        },
                        "plan": "[parameters('plan')]",
                        "retentionInDays": "[if(not(equals(parameters('retention'), -1)), parameters('retention'), '')]"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "outputs": {
            "DcrImmutableId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Insights/dataCollectionRules', parameters('DataCollectionRuleName')), '2021-09-01-preview').immutableId]"
            },
            "DceUri": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Insights/dataCollectionEndpoints', parameters('DataCollectionEndpointName')), '2021-09-01-preview').logsIngestion.endpoint]"
            },
            "DcrName": {
              "type": "string",
              "value": "[parameters('DataCollectionRuleName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "purviewDLPFunction",
      "subscriptionId": "[split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[2]]",
      "resourceGroup": "[split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[4]]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "category": {
            "value": "DLP"
          },
          "displayName": {
            "value": "Microsoft Purview DLP"
          },
          "functionName": {
            "value": "PurviewDLP"
          },
          "lawName": {
            "value": "[split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[8]]"
          },
          "functionAlias": {
            "value": "PurviewDLP"
          },
          "functionParams": {
            "value": "WorkloadNames:dynamic = dynamic(['Exchange', 'MicrosoftTeams', 'SharePoint', 'OneDrive', 'Endpoint']), EndpointSeverityInRuleName:bool = false, EndpointHighSeverityMatchCountTrigger:int = 99999"
          },
          "query": {
            "value": "//Get DLP data elements that are shared across all workloads.\r\nlet DLPCommon = PurviewDLP_CL\r\n| where Workload in (WorkloadNames) and Operation =~ 'DLPRuleMatch'\r\n| extend IngestionTime = ingestion_time()\r\n| mv-expand PolicyDetails\r\n| where PolicyDetails.PolicyName != ''\r\n| mv-expand Rules = PolicyDetails.Rules\r\n| mv-expand ActionsTaken = Rules.Actions\r\n| mv-expand SensitiveInfo = Rules.ConditionsMatched.SensitiveInformation\r\n| mv-expand Detections = SensitiveInfo.SensitiveInformationDetections.DetectedValues\r\n| extend Detections = strcat(Detections.Name, ' (', Detections.Value, ')')\r\n| extend RulesString = tostring(Rules), SensitiveInfoString = tostring(SensitiveInfo)\r\n| summarize ActionsTaken = make_set(ActionsTaken), Detections = make_list(Detections), arg_max(TimeGenerated, *) by TimeGenerated, IngestionTime, CreationTime, Identifier, RulesString, SensitiveInfoString\r\n| extend SensitiveInfoType = bag_pack('Name', SensitiveInfo.SensitiveInformationTypeName, 'Count', toint(SensitiveInfo.Count), 'Confidence', toint(SensitiveInfo.Confidence), 'DetectedValues', Detections)\r\n| extend\r\n    ActionsTaken = strcat_array(ActionsTaken, ', '),\r\n    SensitiveInfoTypeString = strcat(SensitiveInfoType.Name, ' (', SensitiveInfoType.Count, ', ', SensitiveInfoType.Confidence, '%)'),\r\n    PolicyName = tostring(PolicyDetails.PolicyName),\r\n    RuleName = tostring(Rules.RuleName),\r\n    RuleSeverity = tostring(Rules.Severity),\r\n    UserPrincipalName = tolower(UserId),\r\n    UserObjectId = UserKey,\r\n    Deeplink = strcat('https://compliance.microsoft.com/datalossprevention/alerts/eventdeeplink?eventid=', Identifier, '&creationtime=', CreationTime);\r\n\r\n//Get Sharepoint and OneDrive specific data elements from common datatable defined above.\r\nlet DLPSPOD = DLPCommon\r\n| where Workload in ('SharePoint', 'OneDrive')\r\n| mv-expand SensitivityLablelId = SharePointMetaData.SensitivityLablelIds\r\n| extend SensitivityLabelId = tostring(SharePointMetaData.SensitivityLablelId)\r\n| join kind = leftouter (_GetWatchlist('SensitivityLabels')\r\n    | extend SensitivityLabelId = tostring(column_ifexists('id', '')),\r\n        SensitivityLabelName = tostring(column_ifexists('name', ''))) on SensitivityLabelId\r\n| extend OfficeObjectId = url_decode(tostring(SharePointMetaData.FilePathUrl))\r\n| join kind = leftouter (OfficeActivity\r\n    | where ingestion_time() > ago(24h)\r\n    | where Operation == \"AddedToSecureLink\" or Operation == \"SecureLinkUsed\"\r\n    | extend UserId = tolower(UserId),\r\n        TargetUserOrGroupName = tolower(iff(isempty(TargetUserOrGroupName), split(UserId, \"#\")[1], TargetUserOrGroupName))\r\n    ) on $left.UserPrincipalName == $right.UserId, OfficeObjectId\r\n| extend Filename = tostring(SharePointMetaData.FileName),\r\n    FilePath = tostring(SharePointMetaData.FilePathUrl),\r\n    SiteUrl = tostring(SharePointMetaData.SiteCollectionUrl),\r\n    ExceptionReason = tostring(SharePointMetaData.ExceptionInfo.Reason)\r\n| summarize SensitiveInfoTypesArray = make_list(SensitiveInfoType), SensitiveInfoTypes = make_set(SensitiveInfoTypeString), TotalMatchCount = sum(toint(SensitiveInfoType.Count)), SensitivityLabels = make_list(SensitivityLabelName) by TimeGenerated, IngestionTime, CreationTime, Identifier, Workload, Deeplink, usageLocation, UserPrincipalName, UserObjectId, department, manager, jobTitle, PolicyName, RuleName, RuleSeverity, ActionsTaken, FilePath, Filename, SiteUrl, TargetUserOrGroupName, ExceptionReason, Operation;\r\n\r\n//Get Exchange and Teams specific data elements from common datatable defined above.\r\nlet DLPEXOT = DLPCommon\r\n| where Workload in ('Exchange', 'MicrosoftTeams')\r\n| extend Recipients = iff(Workload == 'Exchange', tostring(strcat(array_strcat(ExchangeMetaData.To, ', '), iff(array_length(ExchangeMetaData.CC) == 0, '', \", \"), array_strcat(ExchangeMetaData.CC, ', '), iff(array_length(ExchangeMetaData.BCC) == 0, '', \", \"))), tostring(strcat_array(ExchangeMetaData.To, ', '))),\r\n    InternetMessageId = replace_string(replace_string(tostring(ExchangeMetaData.MessageID), '<', ''), '>',''),\r\n    EmailSubject = tostring(ExchangeMetaData.Subject),\r\n    Sender = UserPrincipalName,\r\n    ExceptionReason = tostring(ExchangeMetaData.ExceptionInfo.Reason)\r\n| summarize SensitiveInfoTypesArray = make_list(SensitiveInfoType), SensitiveInfoTypes = make_set(SensitiveInfoTypeString), TotalMatchCount = sum(toint(SensitiveInfoType.Count)), DetectedLocations = make_set(SensitiveInfo.Location) by TimeGenerated, IngestionTime, CreationTime, Identifier, Workload, Deeplink, usageLocation, UserPrincipalName, UserObjectId, department, manager, jobTitle, PolicyName, RuleName, RuleSeverity, ActionsTaken, Recipients, InternetMessageId, EmailSubject, Sender, ExceptionReason, Operation;\r\n\r\n//Define datatable so we can lookup Endpoint DLP action names from their Id.\r\nlet EndpointAction = datatable(ActionName: string, ActionId: int) [\r\n    \"None\", \"0\",\r\n    \"Audit\", \"1\",\r\n    \"Warn\", \"2\",\r\n    \"WarnAndBypass\", \"3\",\r\n    \"Block\", \"4\",\r\n    \"Allow\", \"5\"\r\n];\r\n//Array to match severity as the last word in rule name if present.\r\nlet EndpointSeverities = dynamic(['Low', 'Medium', 'High']);\r\n\r\n//Get Endpoint specific data elements from common datatable defined above.\r\nlet DLPEndpoint = DLPCommon\r\n| where Workload in ('Endpoint')\r\n| mv-expand SensitiveInfo = EndpointMetaData.SensitiveInfoTypeData\r\n| extend SensitiveInfoType = bag_pack('Name', SensitiveInfo.SensitiveInfoTypeName, 'Count', toint(SensitiveInfo.Count), 'Confidence', toint(SensitiveInfo.Confidence)),\r\n    DeviceFullName = tostring(EndpointMetaData.DeviceName)\r\n| extend RuleSplit = split(tostring(RuleName), ' ')\r\n| extend RuleLength = array_length(RuleSplit)\r\n| extend RuleSeverity = iff(RuleSplit[RuleLength - 1] in (EndpointSeverities) and EndpointSeverityInRuleName == true, RuleSplit[RuleLength - 1], '')\r\n| extend SensitiveInfoTypeString = strcat(SensitiveInfoType.Name, ' (', SensitiveInfoType.Count, ', ', SensitiveInfoType.Confidence, '%)'),\r\n    ActionId = toint(EndpointMetaData.EnforcementMode),\r\n    ClientIP = tostring(EndpointMetaData.ClientIP),\r\n    DeviceHostName = tostring(split(DeviceFullName, '.')[0]), \r\n    DeviceDNSName = tostring(substring(DeviceFullName, indexof(DeviceFullName, '.')+1)),\r\n    Filename = DocumentName,\r\n    FilePath = ObjectId,\r\n    FileHash = tostring(EndpointMetaData.Sha256),\r\n    FileHashAlgorithm = 'SHA256',\r\n    RMSEncrypted = tostring(EndpointMetaData.RMSEncrypted),\r\n    EvidenceFileUrl = tostring(EvidenceFile.FullUrl),\r\n    SourceLocationType = tostring(EndpointMetaData.SourceLocationType), \r\n    EndpointOperation = tostring(EndpointMetaData.EndpointOperation),\r\n    EndpointApplication = tostring(EndpointMetaData.Application),\r\n    EndpointClientIp = tostring(EndpointMetaData.ClientIP)\r\n| join kind = inner(EndpointAction) on ActionId\r\n| extend ActionsTaken = ActionName\r\n| summarize SensitiveInfoTypesArray = make_list(SensitiveInfoType), SensitiveInfoTypes = make_list(SensitiveInfoTypeString), TotalMatchCount = sum(toint(SensitiveInfo.Count)) by TimeGenerated, IngestionTime, CreationTime, Identifier, Workload, Deeplink, usageLocation, UserPrincipalName, UserObjectId, department, manager, jobTitle, PolicyName, RuleName, RuleSeverity, ActionsTaken, DeviceFullName, DeviceHostName, DeviceDNSName, Filename, FilePath, FileHash, FileHashAlgorithm, RMSEncrypted, EvidenceFileUrl, SourceLocationType, EndpointOperation, EndpointApplication, EndpointClientIp, Operation;\r\n\r\n//Merge all the SharePoint/OneDrive, Exchange/Teams, and Endpoints results together.\r\nunion DLPSPOD, DLPEXOT, DLPEndpoint\r\n| extend FileDirectory = parse_path(FilePath).DirectoryPath\r\n| project \r\n//Common attributes\r\nTimeGenerated, IngestionTime, CreationTime, Identifier, Workload, Deeplink, usageLocation, UserPrincipalName, UserObjectId, department, manager, jobTitle, PolicyName, RuleName, ActionsTaken, SensitiveInfoTypesArray, TotalMatchCount, \r\nUsername = split(UserPrincipalName, '@')[0], UPNSuffix =split(UserPrincipalName, '@')[1],\r\nRuleSeverity = iff(TotalMatchCount >= EndpointHighSeverityMatchCountTrigger and Workload == 'Endpoint' and EndpointSeverityInRuleName == false, 'High', RuleSeverity),\r\nSensitiveInfoTypes = iff(array_length(SensitiveInfoTypes) > 1, strcat(SensitiveInfoTypes[0], ' +', array_length(SensitiveInfoTypes) - 1, ' more'), strcat_array(SensitiveInfoTypes, ', ')),\r\n//Endpoint specific attributes\r\nDeviceFullName, DeviceHostName, DeviceDNSName, Filename, FilePath, FileDirectory, FileHash, FileHashAlgorithm, RMSEncrypted, EvidenceFileUrl, SourceLocationType, EndpointOperation, EndpointApplication, EndpointClientIp, Operation,\r\n//Exchange and Teams specific attributes\r\nRecipients, InternetMessageId, EmailSubject, Sender, ExceptionReason,\r\n//SharePoint and OneDrive specific attributes\r\nSiteUrl, TargetUserOrGroupName,\r\nDetectedLocations = strcat_array(DetectedLocations, ', '), SensitivityLabels = strcat_array(SensitivityLabels, ', ')"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "10857068240460963007"
            }
          },
          "parameters": {
            "lawName": {
              "type": "string"
            },
            "functionName": {
              "type": "string"
            },
            "category": {
              "type": "string"
            },
            "displayName": {
              "type": "string"
            },
            "query": {
              "type": "string"
            },
            "functionParams": {
              "type": "string",
              "defaultValue": ""
            },
            "functionAlias": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "apiVersion": "2020-08-01",
              "name": "[format('{0}/{1}', parameters('lawName'), parameters('functionName'))]",
              "properties": {
                "category": "[parameters('category')]",
                "displayName": "[parameters('displayName')]",
                "query": "[parameters('query')]",
                "functionParameters": "[parameters('functionParams')]",
                "functionAlias": "[parameters('functionAlias')]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'createCustomTables')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "keyVaultUpdateNetworkAcl",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "kvName": {
            "value": "[parameters('KeyVaultName')]"
          },
          "location": {
            "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('KeyVaultName')), '2022-07-01', 'full').location]"
          },
          "skuFamily": {
            "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('KeyVaultName')), '2022-07-01').sku.family]"
          },
          "skuName": {
            "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('KeyVaultName')), '2022-07-01').sku.name]"
          },
          "principalId": {
            "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName'))), '2022-01-31-preview').principalId]"
          },
          "aclBypass": {
            "value": "None"
          },
          "aclDefaultAction": {
            "value": "Deny"
          },
          "aclIpRules": {
            "value": "[reference(resourceId('Microsoft.Web/sites', parameters('FunctionAppName')), '2022-03-01').possibleOutboundIpAddresses]"
          },
          "secretPermissions": {
            "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('KeyVaultName')), '2022-07-01').accessPolicies[0].permissions.secrets]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "380844100257844807"
            }
          },
          "parameters": {
            "kvName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "skuFamily": {
              "type": "string"
            },
            "skuName": {
              "type": "string"
            },
            "principalId": {
              "type": "string"
            },
            "secretPermissions": {
              "type": "array"
            },
            "aclIpRules": {
              "type": "string",
              "defaultValue": ""
            },
            "aclBypass": {
              "type": "string",
              "defaultValue": "None"
            },
            "aclDefaultAction": {
              "type": "string",
              "defaultValue": "AzureServices"
            }
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2022-07-01",
              "name": "[parameters('kvName')]",
              "location": "[parameters('location')]",
              "properties": {
                "sku": {
                  "family": "[parameters('skuFamily')]",
                  "name": "[parameters('skuName')]"
                },
                "tenantId": "[subscription().tenantId]",
                "accessPolicies": [
                  {
                    "objectId": "[parameters('principalId')]",
                    "permissions": {
                      "secrets": "[parameters('secretPermissions')]"
                    },
                    "tenantId": "[subscription().tenantId]"
                  }
                ],
                "networkAcls": {
                  "bypass": "[parameters('aclBypass')]",
                  "defaultAction": "[parameters('aclDefaultAction')]",
                  "ipRules": "[if(equals(parameters('aclIpRules'), ''), createArray(), json(format('{0}{1}{2}', '[{\"value\": \"', replace(parameters('aclIpRules'), ',', '\"},{\"value\": \"'), '\"}]')))]"
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('FunctionAppName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', parameters('KeyVaultName'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "rbacAssignmentLaw",
      "subscriptionId": "[split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[2]]",
      "resourceGroup": "[split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[4]]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName'))), '2022-01-31-preview').principalId]"
          },
          "roleDefId": {
            "value": "/providers/Microsoft.Authorization/roleDefinitions/ab8e14d6-4a74-4a29-9ba8-549422addade"
          },
          "scopedResourceName": {
            "value": "[split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[8]]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "12600371489791518091"
            }
          },
          "parameters": {
            "scopedResourceName": {
              "type": "string"
            },
            "roleDefId": {
              "type": "string"
            },
            "principalId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-10-01-preview",
              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('scopedResourceName'))]",
              "name": "[guid(resourceId('Microsoft.OperationalInsights/workspaces', parameters('scopedResourceName')), parameters('roleDefId'), parameters('principalId'))]",
              "properties": {
                "roleDefinitionId": "[parameters('roleDefId')]",
                "principalId": "[parameters('principalId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "sentinelWatchlists",
      "subscriptionId": "[split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[2]]",
      "resourceGroup": "[split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[4]]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "lawName": {
            "value": "[split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[8]]"
          },
          "policySync": {
            "value": "[parameters('DLPPolicySync')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "16731397332983754577"
            }
          },
          "parameters": {
            "lawName": {
              "type": "string"
            },
            "policySync": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "condition": "[equals(parameters('policySync'), true())]",
              "type": "Microsoft.SecurityInsights/watchlists",
              "apiVersion": "2023-02-01",
              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('lawName'))]",
              "name": "Policy",
              "properties": {
                "displayName": "Policy",
                "itemsSearchKey": "Name",
                "provider": "DLP",
                "source": "DLP",
                "contentType": "text/csv",
                "numberOfLinesToSkip": 0,
                "description": "DLP Policies",
                "rawContent": "Name,Workload\r\n40489b3c-b060-4122-af94-5dbe51996729,40489b3c-b060-4122-af94-5dbe51996729\r\n"
              }
            },
            {
              "type": "Microsoft.SecurityInsights/watchlists",
              "apiVersion": "2023-02-01",
              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('lawName'))]",
              "name": "SensitivityLabels",
              "properties": {
                "displayName": "SensitivityLabels",
                "itemsSearchKey": "id",
                "provider": "DLP",
                "source": "DLP",
                "contentType": "text/csv",
                "numberOfLinesToSkip": 0,
                "description": "Sensitivity Labels",
                "rawContent": "id,name,parent\r\n40489b3c-b060-4122-af94-5dbe51996729,40489b3c-b060-4122-af94-5dbe51996729,40489b3c-b060-4122-af94-5dbe51996729\r\n"
              }
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "sentinelRules",
      "subscriptionId": "[split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[2]]",
      "resourceGroup": "[split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[4]]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "workspace": {
            "value": "[split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[8]]"
          },
          "policySync": {
            "value": "[parameters('DLPPolicySync')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "17438801836654139114"
            }
          },
          "parameters": {
            "workspace": {
              "type": "string"
            },
            "policySync": {
              "type": "bool",
              "defaultValue": false
            },
            "guids": {
              "type": "array",
              "defaultValue": [
                "[newGuid()]",
                "[newGuid()]",
                "[newGuid()]",
                "[newGuid()]",
                "[newGuid()]",
                "[newGuid()]"
              ]
            }
          },
          "variables": {
            "$fxv#0": [
              {
                "Alias": "SPOD",
                "Names": [
                  "SharePoint",
                  "OneDrive"
                ]
              },
              {
                "Alias": "EXOT",
                "Names": [
                  "Exchange",
                  "MicrosoftTeams"
                ]
              },
              {
                "Alias": "Endpoint",
                "Names": [
                  "Endpoint"
                ]
              }
            ],
            "workloads": "[variables('$fxv#0')]",
            "baseQueryVar1": "let Workloads = dynamic(WORKLOADSREPLACE);\r\n",
            "baseQueryVar2": "let WorkloadAlias = \"WORKLOADALIASREPLACE\";\r\n",
            "baseQuery": "let AlertProductName = \"Microsoft Data Loss Prevention (Custom)\";\r\n\r\nlet CurrentPolicies = (PurviewDLP_CL\r\n    | where TimeGenerated > ago(14d) and Workload in (Workloads)\r\n    | mv-expand PolicyDetails\r\n| extend Name = tostring(PolicyDetails.PolicyName)\r\n    | where Name != \"\"\r\n    | summarize by Name);\r\n\r\nlet policywatchlist =(_GetWatchlist(\"Policy\")\r\n    | extend Workload = column_ifexists(\"Workload\", \"\")\r\n    | extend Name = column_ifexists(\"Name\", \"\")\r\n    | where Workload == WorkloadAlias and Name in (CurrentPolicies)\r\n    | project SearchKey);\r\n\r\nPurviewDLP(Workloads, true)\r\n| where IngestionTime > ago(5m)\r\n| where PolicyName != \"\" //Do Not Remove\r\n| where not(PolicyName has_any (policywatchlist)) //Do not remove\r\n| extend Product = AlertProductName\r\n| order by TimeGenerated"
          },
          "resources": [
            {
              "condition": "[equals(parameters('policySync'), false())]",
              "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
              "apiVersion": "2022-11-01-preview",
              "name": "[format('{0}/Microsoft.SecurityInsights/64621844-3809-45b1-a072-50b93283e095', parameters('workspace'))]",
              "kind": "Scheduled",
              "properties": {
                "displayName": "Microsoft DLP Incident Creation",
                "description": "",
                "severity": "Medium",
                "enabled": true,
                "query": "let AlertProductName = \"Microsoft Data Loss Prevention (Custom)\";\r\nlet Workloads = dynamic([\"Endpoint\", \"SharePoint\", \"OneDrive\", \"Exchange\", \"MicrosoftTeams\"]);\r\n\r\nPurviewDLP(Workloads,true)\r\n| extend Product = AlertProductName\r\n| join kind=leftanti (SecurityAlert\r\n    | where TimeGenerated > ago(12h)\r\n    | where ProductName == AlertProductName\r\n    | extend Identifier = substring(AlertLink, indexof(AlertLink, \"eventid=\") + 8, indexof(AlertLink, \"&creationtime\") - indexof(AlertLink, \"eventid=\") - 8)\r\n    ) on Identifier\r\n| order by TimeGenerated asc\r\n| take 150",
                "queryFrequency": "PT6M",
                "queryPeriod": "PT8H",
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "suppressionDuration": "PT5H",
                "suppressionEnabled": false,
                "startTimeUtc": null,
                "tactics": [
                  "Exfiltration"
                ],
                "techniques": [],
                "alertRuleTemplateName": null,
                "incidentConfiguration": {
                  "createIncident": true,
                  "groupingConfiguration": {
                    "enabled": true,
                    "reopenClosedIncident": true,
                    "lookbackDuration": "PT45M",
                    "matchingMethod": "Selected",
                    "groupByEntities": [
                      "Account"
                    ],
                    "groupByAlertDetails": [],
                    "groupByCustomDetails": []
                  }
                },
                "eventGroupingSettings": {
                  "aggregationKind": "AlertPerResult"
                },
                "alertDetailsOverride": {
                  "alertDisplayNameFormat": "{{RuleName}} ({{Workload}})",
                  "alertDescriptionFormat": "Microsoft Purview DLP ({{Workload}}) alert for {{UserPrincipalName}}. Use the alert link to view more details about the events within the alert.",
                  "alertSeverityColumnName": "RuleSeverity",
                  "alertDynamicProperties": [
                    {
                      "alertProperty": "AlertLink",
                      "value": "Deeplink"
                    },
                    {
                      "alertProperty": "ProductName",
                      "value": "Product"
                    }
                  ]
                },
                "customDetails": {
                  "User": "UserPrincipalName",
                  "JobTitle": "jobTitle",
                  "Department": "department",
                  "Manager": "manager",
                  "Location": "usageLocation",
                  "Workload": "Workload",
                  "MatchCount": "TotalMatchCount",
                  "SensitiveInfo": "SensitiveInfoTypes",
                  "ActionsTaken": "ActionsTaken",
                  "SharedWith": "TargetUserOrGroupName",
                  "DetectedLocations": "DetectedLocations",
                  "SensitivityLabels": "SensitivityLabels",
                  "Subject": "EmailSubject",
                  "Operation": "EndpointOperation",
                  "Application": "EndpointApplication"
                },
                "entityMappings": [
                  {
                    "entityType": "Account",
                    "fieldMappings": [
                      {
                        "identifier": "AadUserId",
                        "columnName": "UserObjectId"
                      },
                      {
                        "identifier": "Name",
                        "columnName": "Username"
                      },
                      {
                        "identifier": "UPNSuffix",
                        "columnName": "UPNSuffix"
                      }
                    ]
                  },
                  {
                    "entityType": "File",
                    "fieldMappings": [
                      {
                        "identifier": "Name",
                        "columnName": "Filename"
                      },
                      {
                        "identifier": "Directory",
                        "columnName": "FileDirectory"
                      }
                    ]
                  },
                  {
                    "entityType": "MailMessage",
                    "fieldMappings": [
                      {
                        "identifier": "InternetMessageId",
                        "columnName": "InternetMessageId"
                      },
                      {
                        "identifier": "Recipient",
                        "columnName": "Recipients"
                      },
                      {
                        "identifier": "Sender",
                        "columnName": "Sender"
                      }
                    ]
                  },
                  {
                    "entityType": "FileHash",
                    "fieldMappings": [
                      {
                        "identifier": "Algorithm",
                        "columnName": "FileHashAlgorithm"
                      },
                      {
                        "identifier": "Value",
                        "columnName": "FileHash"
                      }
                    ]
                  },
                  {
                    "entityType": "Host",
                    "fieldMappings": [
                      {
                        "identifier": "DnsDomain",
                        "columnName": "DeviceDNSName"
                      },
                      {
                        "identifier": "HostName",
                        "columnName": "DeviceHostName"
                      },
                      {
                        "identifier": "FullName",
                        "columnName": "DeviceFullName"
                      }
                    ]
                  }
                ],
                "sentinelEntitiesMappings": null,
                "templateVersion": null
              }
            },
            {
              "copy": {
                "name": "sentinelRuleSync",
                "count": "[length(variables('workloads'))]"
              },
              "condition": "[equals(parameters('policySync'), true())]",
              "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
              "apiVersion": "2022-11-01-preview",
              "name": "[format('{0}/Microsoft.SecurityInsights/{1}', parameters('workspace'), parameters('guids')[copyIndex()])]",
              "kind": "Scheduled",
              "properties": {
                "displayName": "[format('Microsoft DLP Incident Creation Template ({0})', variables('workloads')[copyIndex()].Alias)]",
                "description": "",
                "severity": "Medium",
                "enabled": true,
                "query": "[concat(replace(variables('baseQueryVar1'), 'WORKLOADSREPLACE', string(variables('workloads')[copyIndex()].Names)), replace(variables('baseQueryVar2'), 'WORKLOADALIASREPLACE', variables('workloads')[copyIndex()].Alias), variables('baseQuery'))]",
                "queryFrequency": "PT5M",
                "queryPeriod": "PT5M",
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "suppressionDuration": "PT5H",
                "suppressionEnabled": false,
                "startTimeUtc": null,
                "tactics": [
                  "Exfiltration"
                ],
                "techniques": [],
                "alertRuleTemplateName": null,
                "incidentConfiguration": {
                  "createIncident": true,
                  "groupingConfiguration": {
                    "enabled": true,
                    "reopenClosedIncident": true,
                    "lookbackDuration": "PT45M",
                    "matchingMethod": "Selected",
                    "groupByEntities": [
                      "Account"
                    ],
                    "groupByAlertDetails": [],
                    "groupByCustomDetails": []
                  }
                },
                "eventGroupingSettings": {
                  "aggregationKind": "AlertPerResult"
                },
                "alertDetailsOverride": {
                  "alertDisplayNameFormat": "{{RuleName}} ({{Workload}})",
                  "alertDescriptionFormat": "Microsoft Purview DLP ({{Workload}}) alert for {{UserPrincipalName}}. Use the alert link to view more details about the events within the alert.",
                  "alertSeverityColumnName": "RuleSeverity",
                  "alertDynamicProperties": [
                    {
                      "alertProperty": "AlertLink",
                      "value": "Deeplink"
                    },
                    {
                      "alertProperty": "ProductName",
                      "value": "Product"
                    }
                  ]
                },
                "customDetails": {
                  "User": "UserPrincipalName",
                  "JobTitle": "jobTitle",
                  "Department": "department",
                  "Manager": "manager",
                  "Location": "usageLocation",
                  "Workload": "Workload",
                  "MatchCount": "TotalMatchCount",
                  "SensitiveInfo": "SensitiveInfoTypes",
                  "ActionsTaken": "ActionsTaken",
                  "SharedWith": "TargetUserOrGroupName",
                  "DetectedLocations": "DetectedLocations",
                  "SensitivityLabels": "SensitivityLabels",
                  "Subject": "EmailSubject",
                  "Operation": "EndpointOperation",
                  "Application": "EndpointApplication"
                },
                "entityMappings": "[if(equals(variables('workloads')[copyIndex()].Alias, 'EXOT'), createArray(createObject('entityType', 'Account', 'fieldMappings', createArray(createObject('identifier', 'AadUserId', 'columnName', 'UserObjectId'), createObject('identifier', 'Name', 'columnName', 'Username'), createObject('identifier', 'UPNSuffix', 'columnName', 'UserPrincipalName'))), createObject('entityType', 'File', 'fieldMappings', createArray(createObject('identifier', 'Name', 'columnName', 'Filename'), createObject('identifier', 'Directory', 'columnName', 'FileDirectory'))), createObject('entityType', 'MailMessage', 'fieldMappings', createArray(createObject('identifier', 'InternetMessageId', 'columnName', 'InternetMessageId'), createObject('identifier', 'Recipient', 'columnName', 'Recipients'), createObject('identifier', 'Sender', 'columnName', 'Sender'))), createObject('entityType', 'FileHash', 'fieldMappings', createArray(createObject('identifier', 'Algorithm', 'columnName', 'FileHashAlgorithm'), createObject('identifier', 'Value', 'columnName', 'FileHash'))), createObject('entityType', 'Host', 'fieldMappings', createArray(createObject('identifier', 'DnsDomain', 'columnName', 'DeviceDNSName'), createObject('identifier', 'HostName', 'columnName', 'DeviceHostName'), createObject('identifier', 'FullName', 'columnName', 'DeviceFullName')))), createArray(createObject('entityType', 'Account', 'fieldMappings', createArray(createObject('identifier', 'AadUserId', 'columnName', 'UserObjectId'), createObject('identifier', 'Name', 'columnName', 'Username'), createObject('identifier', 'UPNSuffix', 'columnName', 'UserPrincipalName'))), createObject('entityType', 'File', 'fieldMappings', createArray(createObject('identifier', 'Name', 'columnName', 'Filename'), createObject('identifier', 'Directory', 'columnName', 'FileDirectory'))), createObject('entityType', 'FileHash', 'fieldMappings', createArray(createObject('identifier', 'Algorithm', 'columnName', 'FileHashAlgorithm'), createObject('identifier', 'Value', 'columnName', 'FileHash'))), createObject('entityType', 'Host', 'fieldMappings', createArray(createObject('identifier', 'DnsDomain', 'columnName', 'DeviceDNSName'), createObject('identifier', 'HostName', 'columnName', 'DeviceHostName'), createObject('identifier', 'FullName', 'columnName', 'DeviceFullName')))))]",
                "sentinelEntitiesMappings": null,
                "templateVersion": null
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'createCustomTables')]",
        "[resourceId('Microsoft.Web/sites', parameters('FunctionAppName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[2], split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[4]), 'Microsoft.Resources/deployments', 'purviewDLPFunction')]"
      ]
    },
    {
      "condition": "[equals(parameters('DeployWorkbooks'), true())]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "sentinelWorkbooks",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "workbookSourceId": {
            "value": "[parameters('LogAnalyticsWorkspaceResourceID')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "7012651729595776517"
            }
          },
          "parameters": {
            "workbookDisplayName": {
              "type": "string",
              "defaultValue": "Microsoft Purview DLP Incident Management",
              "metadata": {
                "description": "The friendly name for the workbook that is used in the Gallery or Saved List.  This name must be unique within a resource group."
              }
            },
            "workbookType": {
              "type": "string",
              "defaultValue": "sentinel",
              "metadata": {
                "description": "The gallery that the workbook will been shown under. Supported values include workbook, tsg, etc. Usually, this is 'workbook'"
              }
            },
            "workbookSourceId": {
              "type": "string",
              "metadata": {
                "description": "The id of resource instance to which the workbook will be associated"
              }
            },
            "workbookId": {
              "type": "string",
              "defaultValue": "[newGuid()]",
              "metadata": {
                "description": "The unique guid for this workbook instance"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Insights/workbooks",
              "apiVersion": "2022-04-01",
              "name": "[parameters('workbookId')]",
              "location": "[resourceGroup().location]",
              "kind": "shared",
              "properties": {
                "displayName": "[parameters('workbookDisplayName')]",
                "serializedData": "{\"version\":\"Notebook/1.0\",\"items\":[{\"type\":1,\"content\":{\"json\":\"## Microsoft Purview DLP Incident Management\"},\"name\":\"text - 2\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"264afe85-711d-483d-a208-af021b3fcfc2\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"paramWorkspace\",\"label\":\"Sentinel Workspace\",\"type\":5,\"isRequired\":true,\"query\":\"resources\\r\\n| where type contains \\\"microsoft.operationalinsights/workspaces\\\"\\r\\n| extend id = tolower(id)\\r\\n| summarize by id=tolower(id)\\r\\n| project id\",\"crossComponentResources\":[\"value::all\"],\"typeSettings\":{\"additionalResourceOptions\":[],\"showDefault\":false},\"queryType\":1,\"value\":\"/subscriptions/46db4fa1-a60c-4cbd-be28-807c0c4ea04f/resourcegroups/rg-dlp11/providers/microsoft.operationalinsights/workspaces/sentinel11\"},{\"id\":\"b8b136a2-f4bf-42c8-babc-902b8ff6cc6d\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"paramTimeRange\",\"label\":\"Incident Modified Time\",\"type\":4,\"isRequired\":true,\"typeSettings\":{\"selectableValues\":[{\"durationMs\":300000},{\"durationMs\":900000},{\"durationMs\":1800000},{\"durationMs\":3600000},{\"durationMs\":14400000},{\"durationMs\":43200000},{\"durationMs\":86400000},{\"durationMs\":172800000},{\"durationMs\":259200000},{\"durationMs\":604800000},{\"durationMs\":1209600000},{\"durationMs\":2419200000},{\"durationMs\":2592000000},{\"durationMs\":5184000000},{\"durationMs\":7776000000}],\"allowCustom\":true},\"value\":{\"durationMs\":7776000000}},{\"id\":\"c10ac340-1c5d-4273-8d4f-04aeb6f7736d\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"paramProduct\",\"label\":\"Product\",\"type\":2,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"SecurityIncident\\r\\n| where TimeGenerated {paramTimeRange} and Status != 'Deleted'\\r\\n| extend Product = tostring(parse_json(tostring(AdditionalData.alertProductNames))[0])\\r\\n| summarize Count=count(IncidentNumber) by Product = case (Product ==\\\"\\\", \\\"Undefined\\\", Product)\\r\\n| project Value = Product, Label = Product, Selected = iff(Product == 'Microsoft Data Loss Prevention (Custom)', true, false) \",\"crossComponentResources\":[\"{paramWorkspace}\"],\"isHiddenWhenLocked\":true,\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"showDefault\":false},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"79d64d60-f4ed-4ed4-ab93-de72d0ee74a5\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"paramStatus\",\"label\":\"Incident Status\",\"type\":2,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"all\",\"showDefault\":false},\"jsonData\":\"[\\r\\n    {\\\"value\\\": \\\"New\\\", \\\"selected\\\": true}, \\r\\n    {\\\"value\\\": \\\"Active\\\", \\\"selected\\\": true},\\r\\n    {\\\"value\\\": \\\"Closed\\\", \\\"selected\\\": false}\\r\\n]\",\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"paramTimeRange\",\"value\":[\"New\",\"Active\"]},{\"id\":\"75803958-4d09-442e-a143-4005d267d0d7\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"paramClassification\",\"label\":\"Incident Classification\",\"type\":2,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"let product = dynamic([{paramProduct}]);\\r\\n\\r\\nSecurityIncident\\r\\n| where TimeGenerated {paramTimeRange} and Status != 'Deleted'\\r\\n| extend Product = todynamic((parse_json(tostring(AdditionalData.alertProductNames))[0]))\\r\\n| where Product in (product) or \\\"*\\\" in (product)\\r\\n| summarize by Classification\\r\\n| where Classification != ''\",\"crossComponentResources\":[\"{paramWorkspace}\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"all\",\"showDefault\":false},\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"paramTimeRange\",\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"17aca97f-01e3-4012-ac2c-8167f6a4353b\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"paramWorkload\",\"label\":\"Workload\",\"type\":2,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"let product = dynamic([{paramProduct}]);\\r\\n\\r\\nSecurityIncident\\r\\n| where TimeGenerated {paramTimeRange} and Status != 'Deleted'\\r\\n| extend Product = todynamic((parse_json(tostring(AdditionalData.alertProductNames))[0]))\\r\\n| where Product in (product) or \\\"*\\\" in (product)\\r\\n| summarize arg_max(TimeGenerated, *) by IncidentNumber\\r\\n| mv-expand AlertIds\\r\\n| extend AlertId = tostring(AlertIds)\\r\\n| join kind=leftouter (SecurityAlert | where TimeGenerated {paramTimeRange} | summarize arg_max(TimeGenerated, *) by SystemAlertId) on $left.AlertId == $right.SystemAlertId\\r\\n| extend Workload = parse_json(tostring(parse_json(ExtendedProperties).[\\\"Custom Details\\\"])).Workload[0]\\r\\n| summarize by tostring(Workload), Label = iff(Workload == 'MicrosoftTeams', 'Microsoft Teams', Workload)\\r\\n| where Workload != ''\",\"crossComponentResources\":[\"{paramWorkspace}\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"all\",\"showDefault\":false},\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"c9768571-fcde-4d64-9a1b-f8339e6f21a7\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"paramMatchCount\",\"label\":\"Match Count GTE\",\"type\":1,\"query\":\"print('0')\",\"typeSettings\":{\"paramValidationRules\":[{\"regExp\":\"/^\\\\d+$/\",\"match\":false,\"message\":\"Please provide a number value.\"}]},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"38428091-9cd9-423f-aa0c-b67f4129e807\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"paramSubscriptionId\",\"type\":1,\"query\":\"let workspaceId = datatable(data:string) ['{paramWorkspace}'];\\r\\n\\r\\nworkspaceId\\r\\n| extend SubscriptionId = split(data, '/')[2]\\r\\n| project SubscriptionId\",\"crossComponentResources\":[\"{paramWorkspace}\"],\"isHiddenWhenLocked\":true,\"queryType\":0,\"resourceType\":\"microsoft.resources/subscriptions\"},{\"id\":\"3a92ac27-d518-486c-b521-0c19b0cc2542\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"paramRgName\",\"type\":1,\"query\":\"let workspaceId = datatable(data:string) ['{paramWorkspace}'];\\r\\n\\r\\nworkspaceId\\r\\n| extend RgName = split(data, '/')[4]\\r\\n| project RgName\",\"crossComponentResources\":[\"{paramWorkspace}\"],\"isHiddenWhenLocked\":true,\"queryType\":0,\"resourceType\":\"microsoft.resources/resourcegroups\"}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parametersMain\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"99d21c0f-2d6c-40a7-a8ad-eb3ec663f544\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"paramIncidents\",\"type\":1,\"query\":\"{\\\"version\\\":\\\"ARMEndpoint/1.0\\\",\\\"data\\\":null,\\\"headers\\\":[],\\\"method\\\":\\\"GET\\\",\\\"path\\\":\\\"/subscriptions/{paramSubscriptionId}/resourceGroups/{paramRgName}/providers/Microsoft.OperationalInsights/workspaces/{paramWorkspace:label}/providers/Microsoft.SecurityInsights/incidents?api-version=2023-05-01-preview&$orderby=properties/lastModifiedTimeUtc desc&$top=1000&$filter=properties/lastModifiedTimeUtc gt {paramTimeRange:startISO}\\\",\\\"urlParams\\\":[],\\\"batchDisabled\\\":false,\\\"transformers\\\":[{\\\"type\\\":\\\"jsonpath\\\"}]}\",\"timeContext\":{\"durationMs\":86400000},\"queryType\":12}],\"style\":\"pills\",\"queryType\":12},\"conditionalVisibility\":{\"parameterName\":\"paramWorkspace\",\"comparison\":\"isEqualTo\",\"value\":\"67585678\"},\"name\":\"parametersHidden\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let status = dynamic([{paramStatus}]);\\r\\nlet classification = dynamic([{paramClassification}]);\\r\\nlet workload = dynamic([{paramWorkload}]);\\r\\nlet product = dynamic([{paramProduct}]);\\r\\nlet matchCountTrigger = {paramMatchCount};\\r\\n\\r\\nlet data = SecurityIncident\\r\\n| where TimeGenerated {paramTimeRange}\\r\\n| extend Product = todynamic((parse_json(tostring(AdditionalData.alertProductNames))[0]))\\r\\n| where Product in (product) or \\\"*\\\" in (product)\\r\\n| summarize arg_max(TimeGenerated, *) by IncidentNumber\\r\\n| where Status in (status) or 'all' in (status) \\r\\n| where Classification in (classification) or 'all' in (classification)\\r\\n| summarize arg_max(TimeGenerated, *) by IncidentNumber\\r\\n| mv-expand AlertIds\\r\\n| extend AlertId = tostring(AlertIds)\\r\\n| join kind=leftouter (SecurityAlert | where TimeGenerated {paramTimeRange} | summarize arg_max(TimeGenerated, *) by SystemAlertId\\r\\n    | extend EventId = substring(AlertLink, indexof(AlertLink, 'eventid=') + 8, indexof(AlertLink, '&creationtime') - indexof(AlertLink, 'eventid=') - 8)\\r\\n    | extend Workload = tostring(parse_json(tostring(parse_json(ExtendedProperties).[\\\"Custom Details\\\"])).Workload[0])\\r\\n    | extend User = tostring(parse_json(tostring(parse_json(ExtendedProperties).[\\\"Custom Details\\\"])).User[0])\\r\\n    | extend Actions = tostring(parse_json(tostring(parse_json(ExtendedProperties).[\\\"Custom Details\\\"])).ActionsTaken[0])\\r\\n    | extend MatchCount = tostring(parse_json(tostring(parse_json(ExtendedProperties).[\\\"Custom Details\\\"])).MatchCount[0])\\r\\n    | extend PolicyName = AlertName\\r\\n    | extend AlertStatus = Status) on $left.AlertId == $right.SystemAlertId\\r\\n| extend IncidentNumber = tostring(IncidentNumber)\\r\\n| extend IncidentArmId = strcat('{paramWorkspace}/providers/Microsoft.SecurityInsights/Incidents/', IncidentName)\\r\\n| where Workload in (workload) or 'all' in (workload)\\r\\n| where toint(MatchCount) >= matchCountTrigger\\r\\n| order by TimeGenerated;\\r\\n\\r\\ndata\\r\\n| summarize arg_max(TimeGenerated, *), Count = count() by SystemAlertId\\r\\n| project Type = 'Alert', ID = int(null), Title = AlertName, CreatedTime = StartTime, LastUpdateTime = ProcessingEndTime, IdField = strcat(IncidentNumber, '/', SystemAlertId), Parent = IncidentNumber, Status = AlertStatus, Owner = '', Severity = AlertSeverity, Link = AlertLink, Workload, MatchCount, User, Actions, IncidentArmId\\r\\n| union (data\\r\\n    | summarize Count = count(), MatchCount = tostring(max(toint(MatchCount))), User = tostring(count_distinct(User)), Workload = tostring(count_distinct(Workload)), arg_max(TimeGenerated, *) by IncidentNumber\\r\\n    | project Type = 'Incident', ID = toint(IncidentNumber), Title, CreatedTime, LastUpdateTime = LastModifiedTime, IdField = IncidentNumber, Owner = iff(Owner.assignedTo == '', 'Unassigned', tostring(Owner.assignedTo)), Status, Parent = '', Severity = strcat('(', Count, ') ', Severity), Workload = strcat('(', Workload, ')'), Link = IncidentUrl, User = strcat('(', User, ')'), MatchCount, IncidentArmId)\\r\\n| order by LastUpdateTime\\r\\n\\r\\n\\r\\n\",\"size\":3,\"title\":\"DLP Incidents\",\"timeContextFromParameter\":\"paramTimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{paramWorkspace}\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"ID\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"OpenBlade\",\"bladeOpenContext\":{\"bladeName\":\"IncidentPage.ReactView\",\"extensionName\":\"Microsoft_Azure_Security_Insights\",\"bladeParameters\":[{\"name\":\"incidentArmId\",\"source\":\"column\",\"value\":\"IncidentArmId\"}]}}},{\"columnMatch\":\"IdField\",\"formatter\":5},{\"columnMatch\":\"Parent\",\"formatter\":5},{\"columnMatch\":\"Title\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"OpenBlade\",\"linkIsContextBlade\":true,\"bladeOpenContext\":{\"bladeName\":\"IncidentPage.ReactView\",\"extensionName\":\"Microsoft_Azure_Security_Insights\",\"bladeParameters\":[{\"name\":\"incidentArmId\",\"source\":\"column\",\"value\":\"IncidentArmId\"}]}}},{\"columnMatch\":\"Severity\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"contains\",\"thresholdValue\":\"High\",\"representation\":\"Sev0\",\"text\":\"{0}{1}\"},{\"operator\":\"contains\",\"thresholdValue\":\"Medium\",\"representation\":\"Sev1\",\"text\":\"{0}{1}\"},{\"operator\":\"contains\",\"thresholdValue\":\"Low\",\"representation\":\"Sev2\",\"text\":\"{0}{1}\"},{\"operator\":\"contains\",\"thresholdValue\":\"Informational\",\"representation\":\"Sev3\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"Sev0\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"Link\",\"formatter\":5,\"formatOptions\":{\"linkTarget\":\"Url\",\"linkLabel\":\"Open\"}},{\"columnMatch\":\"IncidentArmId\",\"formatter\":5}],\"rowLimit\":10000,\"hierarchySettings\":{\"idColumn\":\"IdField\",\"parentColumn\":\"Parent\",\"treeType\":0,\"expanderColumn\":\"Severity\"},\"sortBy\":[{\"itemKey\":\"CreatedTime\",\"sortOrder\":2}],\"labelSettings\":[{\"columnId\":\"CreatedTime\",\"label\":\"Created Time\"},{\"columnId\":\"LastUpdateTime\",\"label\":\"Last Update Time\"},{\"columnId\":\"Workload\",\"label\":\"Workloads\"},{\"columnId\":\"MatchCount\",\"label\":\"Match Count\"},{\"columnId\":\"User\",\"label\":\"Users\"}]},\"sortBy\":[{\"itemKey\":\"CreatedTime\",\"sortOrder\":2}]},\"conditionalVisibility\":{\"parameterName\":\"paramWorkspace\",\"comparison\":\"isEqualTo\",\"value\":\"999999999999\"},\"name\":\"queryDlpAlertsOld\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let status = dynamic([{paramStatus}]);\\r\\nlet classification = dynamic([{paramClassification}]);\\r\\nlet workload = dynamic([{paramWorkload}]);\\r\\nlet product = dynamic([{paramProduct}]);\\r\\nlet matchCountTrigger = {paramMatchCount};\\r\\n\\r\\nlet IncidentData = datatable(data:string) ['{paramIncidents}'];\\r\\n\\r\\nlet Incidents = IncidentData\\r\\n| extend replace = replace_string(data, '\\\"\\\"', '\\\"')\\r\\n| extend json = parse_json(replace)\\r\\n| mv-expand json\\r\\n| extend IncidentNumber = tostring(parse_json(tostring(json.properties)).incidentNumber)\\r\\n| extend Title = tostring(parse_json(tostring(json.properties)).[\\\"title\\\"])\\r\\n| extend Status = tostring(parse_json(tostring(json.properties)).status)\\r\\n| extend Classification = tostring(parse_json(tostring(json.properties)).classification)\\r\\n| extend Severity = tostring(parse_json(tostring(json.properties)).severity)\\r\\n| extend IncidentUrl = tostring(parse_json(tostring(json.properties)).incidentUrl)\\r\\n| extend Owner = tostring(parse_json(tostring(json.properties)).owner.assignedTo)\\r\\n| extend IncidentName = tostring(json.name)\\r\\n| extend CreatedTime = todatetime(parse_json(tostring(json.properties)).createdTimeUtc)\\r\\n| extend LastModifiedTime = todatetime(parse_json(tostring(json.properties)).lastModifiedTimeUtc)\\r\\n| extend Product = tostring(parse_json(tostring(parse_json(tostring(parse_json(tostring(json.properties)).additionalData)).alertProductNames))[0])\\r\\n| where Product in (product) or \\\"*\\\" in (product)\\r\\n| where Status in (status) or 'all' in (status) \\r\\n| where Classification in (classification) or 'all' in (classification)\\r\\n| join kind=leftouter (SecurityIncident | where TimeGenerated {paramTimeRange} | summarize arg_max(TimeGenerated, *) by tostring(IncidentNumber)) on IncidentNumber\\r\\n| mv-expand AlertIds\\r\\n| extend AlertId = tostring(AlertIds)\\r\\n| join kind=leftouter (SecurityAlert | where TimeGenerated {paramTimeRange} | summarize arg_max(TimeGenerated, *) by SystemAlertId\\r\\n    | extend EventId = substring(AlertLink, indexof(AlertLink, 'eventid=') + 8, indexof(AlertLink, '&creationtime') - indexof(AlertLink, 'eventid=') - 8)\\r\\n    | extend Workload = tostring(parse_json(tostring(parse_json(ExtendedProperties).[\\\"Custom Details\\\"])).Workload[0])\\r\\n    | extend User = tostring(parse_json(tostring(parse_json(ExtendedProperties).[\\\"Custom Details\\\"])).User[0])\\r\\n    | extend Actions = tostring(parse_json(tostring(parse_json(ExtendedProperties).[\\\"Custom Details\\\"])).ActionsTaken[0])\\r\\n    | extend MatchCount = tostring(parse_json(tostring(parse_json(ExtendedProperties).[\\\"Custom Details\\\"])).MatchCount[0])\\r\\n    | extend PolicyName = AlertName\\r\\n    | extend AlertStatus = Status) on $left.AlertId == $right.SystemAlertId\\r\\n| extend IncidentArmId = strcat('{paramWorkspace}/providers/Microsoft.SecurityInsights/Incidents/', IncidentName)\\r\\n| where Workload in (workload) or 'all' in (workload)\\r\\n| where toint(MatchCount) >= matchCountTrigger;\\r\\n\\r\\nIncidents\\r\\n| summarize arg_max(TimeGenerated, *), Count = count() by SystemAlertId\\r\\n| project Type = 'Alert', ID = int(null), Title = AlertName, CreatedTime = StartTime, LastUpdateTime = ProcessingEndTime, IdField = strcat(IncidentNumber, '/', SystemAlertId), Parent = IncidentNumber, Status = AlertStatus, Owner = '', Severity = AlertSeverity, Link = AlertLink, Workload, MatchCount, User, Actions, IncidentArmId\\r\\n| union (Incidents\\r\\n    | summarize Count = count(), MatchCount = tostring(max(toint(MatchCount))), User = tostring(count_distinct(User)), Workload = tostring(count_distinct(Workload)), arg_max(TimeGenerated, *) by IncidentNumber\\r\\n    | project Type = 'Incident', ID = toint(IncidentNumber), Title, CreatedTime, LastUpdateTime = LastModifiedTime, IdField = IncidentNumber, Owner = iff(Owner == '', 'Unassigned', tostring(Owner)), Status, Parent = '', Severity = strcat('(', Count, ') ', Severity), Workload = strcat('(', Workload, ')'), Link = IncidentUrl, User = strcat('(', User, ')'), MatchCount, IncidentArmId)\\r\\n| order by LastUpdateTime\\r\\n\\r\\n\\r\\n\",\"size\":3,\"title\":\"DLP Incidents\",\"timeContextFromParameter\":\"paramTimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{paramWorkspace}\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"ID\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"OpenBlade\",\"bladeOpenContext\":{\"bladeName\":\"IncidentPage.ReactView\",\"extensionName\":\"Microsoft_Azure_Security_Insights\",\"bladeParameters\":[{\"name\":\"incidentArmId\",\"source\":\"column\",\"value\":\"IncidentArmId\"}]}}},{\"columnMatch\":\"IdField\",\"formatter\":5},{\"columnMatch\":\"Parent\",\"formatter\":5},{\"columnMatch\":\"Title\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"OpenBlade\",\"linkIsContextBlade\":true,\"bladeOpenContext\":{\"bladeName\":\"IncidentPage.ReactView\",\"extensionName\":\"Microsoft_Azure_Security_Insights\",\"bladeParameters\":[{\"name\":\"incidentArmId\",\"source\":\"column\",\"value\":\"IncidentArmId\"}]}}},{\"columnMatch\":\"Severity\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"contains\",\"thresholdValue\":\"High\",\"representation\":\"Sev0\",\"text\":\"{0}{1}\"},{\"operator\":\"contains\",\"thresholdValue\":\"Medium\",\"representation\":\"Sev1\",\"text\":\"{0}{1}\"},{\"operator\":\"contains\",\"thresholdValue\":\"Low\",\"representation\":\"Sev2\",\"text\":\"{0}{1}\"},{\"operator\":\"contains\",\"thresholdValue\":\"Informational\",\"representation\":\"Sev3\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"Sev0\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"Link\",\"formatter\":5,\"formatOptions\":{\"linkTarget\":\"Url\",\"linkLabel\":\"Open\"}},{\"columnMatch\":\"IncidentArmId\",\"formatter\":5}],\"rowLimit\":10000,\"hierarchySettings\":{\"idColumn\":\"IdField\",\"parentColumn\":\"Parent\",\"treeType\":0,\"expanderColumn\":\"Severity\"},\"sortBy\":[{\"itemKey\":\"LastUpdateTime\",\"sortOrder\":2}],\"labelSettings\":[{\"columnId\":\"CreatedTime\",\"label\":\"Created Time\"},{\"columnId\":\"LastUpdateTime\",\"label\":\"Last Update Time\"},{\"columnId\":\"Workload\",\"label\":\"Workloads\"},{\"columnId\":\"MatchCount\",\"label\":\"Match Count\"},{\"columnId\":\"User\",\"label\":\"Users\"}]},\"sortBy\":[{\"itemKey\":\"LastUpdateTime\",\"sortOrder\":2}]},\"name\":\"queryDlpIncidents\"}],\"isLocked\":false,\"fallbackResourceIds\":[\"/subscriptions/46db4fa1-a60c-4cbd-be28-807c0c4ea04f/resourcegroups/rg-dlp11/providers/microsoft.operationalinsights/workspaces/sentinel11\"],\"fromTemplateId\":\"sentinel-UserWorkbook\"}",
                "version": "1.0",
                "sourceId": "[parameters('workbookSourceId')]",
                "category": "[parameters('workbookType')]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'createCustomTables')]",
        "[resourceId('Microsoft.Web/sites', parameters('FunctionAppName'))]"
      ]
    }
  ],
  "outputs": {
    "UserAssignedManagedIdentityPrincipalId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName'))), '2022-01-31-preview').principalId]"
    },
    "UserAssignedManagedIdentityPrincipalName": {
      "type": "string",
      "value": "[format('uami-{0}', parameters('FunctionAppName'))]"
    }
  }
}