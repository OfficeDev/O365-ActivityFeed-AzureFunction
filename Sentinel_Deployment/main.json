{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.32.4.45862",
      "templateHash": "8779542428594430678"
    }
  },
  "parameters": {
    "FunctionAppName": {
      "type": "string",
      "defaultValue": "fa-sentineldlp-[Replace with globally unique identifier]",
      "metadata": {
        "description": "A globally unique name for the Function App to be created which will run the code to ingest DLP data into Sentinel."
      }
    },
    "DeployApplicationInsights": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Select to enable Application Insights for the Function App. This will allow you to monitor the status of the Function App for any errors. The Log Analytics Workspace specified in the \"Log Analytics Resource Id\" Parameter will be used to store the Application Insights data."
      }
    },
    "KeyVaultName": {
      "type": "string",
      "defaultValue": "kv-sentineldlp-[Replace with globally unique identifier]",
      "metadata": {
        "description": "A globally unique name for the Key Vault to be created which will store Function App secrets."
      }
    },
    "StorageAccountName": {
      "type": "string",
      "defaultValue": "stsentineldlp[Replace with globally unique identifier]",
      "metadata": {
        "description": "A globally unique name for the Function App Storage Account. Must be between 3 and 24 characters in length and use numbers and lower-case letters only."
      }
    },
    "CustomRoleName": {
      "type": "string",
      "defaultValue": "Custom Role - Sentinel DLP Contributor",
      "metadata": {
        "description": "Name of custom role to be created at the Log Analytics resource group level. The name needs to be unique across the entire tenant. This role provides the Function App read/write access to Sentinel watchlists, alert rules, and read data in the PurviewDLP_CL table."
      }
    },
    "TenantID": {
      "type": "string",
      "defaultValue": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
      "metadata": {
        "description": "Azure AD tenant ID in which DLP instance resides."
      }
    },
    "ClientID": {
      "type": "string",
      "defaultValue": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
      "metadata": {
        "description": "App Registration Client ID."
      }
    },
    "ClientSecret": {
      "type": "securestring",
      "metadata": {
        "description": "App Registration Client secret."
      }
    },
    "InternalDomainNames": {
      "type": "string",
      "defaultValue": "yourtenant.onmicrosoft.com,yourdomain.com,youradditionaldomain.com",
      "metadata": {
        "description": "Comma seperated list of internal domain names for your organization to better determine the source of email messages. If domains are left out, enrichment will not occur for those users."
      }
    },
    "DataCollectionEndpointName": {
      "type": "string",
      "defaultValue": "dce-sentineldlp",
      "metadata": {
        "description": "Name for Data Collection Endpoint to be created which is used to ingest data into Log Analytics workspace."
      }
    },
    "DataCollectionRuleName": {
      "type": "string",
      "defaultValue": "dcr-sentineldlp",
      "metadata": {
        "description": "Name for Data Collection Rule to be created which is used to ingest data into Log Analytics workspace."
      }
    },
    "LogAnalyticsWorkspaceResourceID": {
      "type": "string",
      "defaultValue": "/subscriptions/xxxxxxxx-xxxxxxxx-xxxxxxxx-xxxxxxxx-xxxxxxxx/resourcegroups/xxxxxxxx/providers/microsoft.operationalinsights/workspaces/xxxxxxxx",
      "metadata": {
        "description": "Azure Resource ID (NOT THE WORKSPACE ID) of the existing Log Analytics Workspace where you would like the DLP and optional Function App Application Insights data to reside. This can be found by clicking the \"JSON View\" link within the Overview page of the Log Analytics workspace resource. The format is: \"/subscriptions/xxxxxxxx-xxxxxxxx-xxxxxxxx-xxxxxxxx-xxxxxxxx/resourcegroups/xxxxxxxx/providers/microsoft.operationalinsights/workspaces/xxxxxxxx\""
      }
    },
    "DeployAnalyticsRules": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Create Sentinel Analytics Rule(s) to create alerts and incidents out of DLP events."
      }
    },
    "DLPPolicySync": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Create a Sentinel scheduled query rule for each DLP policy and workload (i.e., Teams, SharePoint, Endpoint, etc.). If \"false\", a single scheduled query rule will be created to cover all policies and workloads."
      }
    },
    "SensitivityLabelSync": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Sync Purview Sensitivity Label information to a Sentinel Watchlist so the label name can be looked up when referenced in events."
      }
    },
    "DeployAzureMonitorFunction": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Required for Analytics Rule(s) and Workbooks. Create Azure Monitor Function named PurviewDLP to normalize DLP data at query time."
      }
    },
    "DeployWorkbooks": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploy Azure workbooks to help visualize the DLP data and manage DLP incidents."
      }
    },
    "DeployFunctionCode": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Use the Azure Deployment Script resource to automatically deploy the Function App code. This requires the Microsoft.ContainerInstance resource provider to be registred on the subsription."
      }
    },
    "RepoUri": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/OfficeDev/O365-ActivityFeed-AzureFunction/master",
      "metadata": {
        "description": "GitHub repo where Azure Function package and post deployment script is located. Leave the default value unless you are using content from a different location. This is not applicable if the Deploy Function Code parameter is set to false."
      }
    },
    "SensitiveDataHandling": {
      "type": "string",
      "defaultValue": "Hash",
      "allowedValues": [
        "Keep",
        "Hash",
        "Remove"
      ],
      "metadata": {
        "description": "Select how you would like the the sensitive information type detections to be handled when ingesting into the Log Analytics workspace."
      }
    },
    "ShowSensitiveInfoDetectionValues": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "By default, the included PurviewDLP Azure Monitor function will not return sensitive info type detected values, you must explicitly specify the \"PurviewDLP(ShowDetections=true)\" parameter when running the function to return this data. Setting this deployment parameter to true will make the function return the detected values by default, including in alerts."
      }
    },
    "EndpointSeverityInRuleName": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Because the API does not currently supply the alert severity value for Endpoint events, you can choose to have Sentinel derive the severity from the DLP policy rule name. The rule name must have a \"Low\", \"Medium\", or \"High\" suffix value with a space as the delimiter. For example, \"DLP rule name Medium\" or \"DLP rule name High\". If set to false, the severity will default to Medium for all alerts unless the sensitive info detection count is above 50. This threshold can be modified via the \"EndpointHighSeverityMatchCountTrigger\" PurviewDLP Log Analytics function parameter."
      }
    },
    "EnableElasticPremiumPlan": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Recommended when processing a large number of events but increases cost."
      }
    },
    "EnablePrivateNetworking": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enabling Private Networking will restrict public access to the Function App for additional security. A Virtual Network with the below address space and subnets, along with an NSG, Private Endpoints, and Private DNS Zones will be deployed to support this configuration. This will also leverage the Dedicated App Service Premium plan (P0v3) instead of the Consumption plan (If the Elastic Premium Plan is selected, it will be used instead of the Dedicated App Service Premium Plan.)."
      }
    },
    "PrivateNetworkAddressSpace": {
      "type": "string",
      "defaultValue": "10.0.0.0/24",
      "metadata": {
        "description": "If enabling Private Networking, choose the desired address space for the Virtual Network or leave the default."
      }
    },
    "PrivateEndpointsSubnet": {
      "type": "string",
      "defaultValue": "10.0.0.0/26",
      "metadata": {
        "description": "If enabling Private Networking, choose the desired address space for the Private Endpoints subnet or leave the default. Do not make subnets any smaller than the default."
      }
    },
    "FunctionAppSubnet": {
      "type": "string",
      "defaultValue": "10.0.0.64/26",
      "metadata": {
        "description": "If enabling Private Networking, choose the desired address space for the Function App vnet integration subnet or leave the default. Do not make subnets any smaller than the default."
      }
    }
  },
  "variables": {
    "deploymentVersion": "1.1.2",
    "location": "[resourceGroup().location]",
    "functionAppPackageUri": "[format('{0}/Sentinel_Deployment/functionPackage.zip', parameters('RepoUri'))]",
    "deploymentScriptUri": "[format('{0}/Sentinel_Deployment/deploymentScript.ps1', parameters('RepoUri'))]",
    "roleIdOwner": "/providers/Microsoft.Authorization/roleDefinitions/8e3af657-a8ff-443c-a75c-2fe8c4bcb635",
    "appSettingsFilesKv": [
      {
        "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
        "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName=StorageAccountConnectionString)', parameters('KeyVaultName'))]"
      },
      {
        "name": "WEBSITE_CONTENTSHARE",
        "value": "[toLower(parameters('FunctionAppName'))]"
      }
    ]
  },
  "resources": [
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2022-01-31-preview",
      "name": "[format('uami-{0}', parameters('FunctionAppName'))]",
      "location": "[variables('location')]"
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-08-01",
      "name": "[parameters('StorageAccountName')]",
      "location": "[variables('location')]",
      "kind": "StorageV2",
      "sku": {
        "name": "Standard_LRS"
      },
      "properties": {
        "allowBlobPublicAccess": false,
        "publicNetworkAccess": "[if(equals(parameters('EnablePrivateNetworking'), true()), 'Disabled', 'Enabled')]",
        "minimumTlsVersion": "TLS1_2",
        "networkAcls": {
          "defaultAction": "[if(equals(parameters('EnablePrivateNetworking'), true()), 'Deny', 'Allow')]",
          "bypass": "AzureServices"
        },
        "allowSharedKeyAccess": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'createCustomTables')]"
      ]
    },
    {
      "condition": "[or(not(equals(parameters('EnablePrivateNetworking'), true())), equals(parameters('EnableElasticPremiumPlan'), true()))]",
      "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}/default/{1}', parameters('StorageAccountName'), toLower(parameters('FunctionAppName')))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('StorageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/queueServices/queues",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}/default/dlpqueue', parameters('StorageAccountName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('StorageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2022-07-01",
      "name": "[parameters('KeyVaultName')]",
      "location": "[variables('location')]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "premium"
        },
        "tenantId": "[subscription().tenantId]",
        "accessPolicies": [
          {
            "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName'))), '2022-01-31-preview').principalId]",
            "permissions": {
              "secrets": [
                "get",
                "set",
                "list",
                "delete"
              ]
            },
            "tenantId": "[subscription().tenantId]"
          }
        ],
        "publicNetworkAccess": "[if(equals(parameters('EnablePrivateNetworking'), true()), 'Disabled', 'Enabled')]",
        "networkAcls": {
          "defaultAction": "[if(equals(parameters('EnablePrivateNetworking'), true()), 'Deny', 'Allow')]",
          "bypass": "[if(equals(parameters('EnablePrivateNetworking'), true()), 'None', 'AzureServices')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName')))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2022-07-01",
      "name": "[format('{0}/{1}', parameters('KeyVaultName'), 'StorageAccountConnectionString')]",
      "properties": {
        "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', parameters('StorageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('StorageAccountName')), '2021-08-01').keys[0].value)]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('KeyVaultName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('StorageAccountName'))]"
      ]
    },
    {
      "condition": "[not(equals(parameters('ClientSecret'), ''))]",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2022-07-01",
      "name": "[format('{0}/{1}', parameters('KeyVaultName'), 'ClientSecret')]",
      "properties": {
        "value": "[parameters('ClientSecret')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('KeyVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2021-03-01",
      "name": "[parameters('FunctionAppName')]",
      "location": "[variables('location')]",
      "sku": {
        "name": "[if(equals(parameters('EnableElasticPremiumPlan'), true()), 'EP1', if(equals(parameters('EnablePrivateNetworking'), true()), 'P0v3', 'Y1'))]",
        "tier": "[if(equals(parameters('EnableElasticPremiumPlan'), true()), 'ElasticPremium', if(equals(parameters('EnablePrivateNetworking'), true()), 'PremiumV3', 'Dynamic'))]"
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2024-04-01",
      "name": "[parameters('FunctionAppName')]",
      "location": "[variables('location')]",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName'))))]": {}
        }
      },
      "kind": "functionapp",
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('FunctionAppName'))]",
        "keyVaultReferenceIdentity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName')))]",
        "httpsOnly": true,
        "clientCertEnabled": true,
        "clientCertMode": "OptionalInteractiveUser",
        "virtualNetworkSubnetId": "[if(equals(parameters('EnablePrivateNetworking'), true()), reference(resourceId('Microsoft.Resources/deployments', 'privateNetwork'), '2022-09-01').outputs.functionAppSubnetId.value, null())]",
        "vnetContentShareEnabled": "[if(equals(parameters('EnablePrivateNetworking'), true()), true(), false())]",
        "vnetRouteAllEnabled": "[if(equals(parameters('EnablePrivateNetworking'), true()), true(), false())]",
        "siteConfig": {
          "appSettings": "[concat(createArray(createObject('name', 'AzureWebJobsStorage', 'value', format('@Microsoft.KeyVault(VaultName={0};SecretName=StorageAccountConnectionString)', parameters('KeyVaultName'))), createObject('name', 'AzureWebJobsSecretStorageType', 'value', 'keyvault'), createObject('name', 'AzureWebJobsSecretStorageKeyVaultUri', 'value', format('https://{0}{1}/', parameters('KeyVaultName'), environment().suffixes.keyvaultDns)), createObject('name', 'AzureWebJobsSecretStorageKeyVaultClientId', 'value', reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName'))), '2022-01-31-preview').clientId), createObject('name', 'FUNCTIONS_EXTENSION_VERSION', 'value', '~4'), createObject('name', 'APPINSIGHTS_INSTRUMENTATIONKEY', 'value', if(equals(parameters('DeployApplicationInsights'), true()), reference(resourceId('Microsoft.Insights/components', format('appInsights-{0}', parameters('FunctionAppName'))), '2020-02-02').InstrumentationKey, '')), createObject('name', 'FUNCTIONS_WORKER_RUNTIME', 'value', 'powershell'), createObject('name', 'WEBSITE_RUN_FROM_PACKAGE', 'value', '1'), createObject('name', 'AzureWebJobs.SyncDLPAnalyticsRules.Disabled', 'value', if(equals(parameters('DLPPolicySync'), false()), '1', '0')), createObject('name', 'AzureWebJobs.SyncSensitivityLabels.Disabled', 'value', if(equals(parameters('SensitivityLabelSync'), false()), '1', '0')), createObject('name', 'ClientID', 'value', parameters('ClientID')), createObject('name', 'ClientSecret', 'value', format('@Microsoft.KeyVault(VaultName={0};SecretName=ClientSecret)', parameters('KeyVaultName'))), createObject('name', 'ContentTypes', 'value', 'DLP.ALL'), createObject('name', 'customLogName', 'value', 'PurviewDLP'), createObject('name', 'domains', 'value', parameters('InternalDomainNames')), createObject('name', 'storageQueue', 'value', 'dlpqueue'), createObject('name', 'TenantGuid', 'value', parameters('TenantID')), createObject('name', 'SentinelWorkspace', 'value', split(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[2], split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[8]), '/')[8]), createObject('name', 'UamiClientId', 'value', reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName'))), '2022-01-31-preview').clientId), createObject('name', 'DcrImmutableId', 'value', reference(resourceId('Microsoft.Resources/deployments', 'createCustomTables'), '2022-09-01').outputs.DcrImmutableId.value), createObject('name', 'DceUri', 'value', reference(resourceId('Microsoft.Resources/deployments', 'createCustomTables'), '2022-09-01').outputs.DceUri.value), createObject('name', 'LawResourceId', 'value', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[2], split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[8])), createObject('name', 'SensitiveDataHandling', 'value', parameters('SensitiveDataHandling')), createObject('name', 'DeploymentVersion', 'value', variables('deploymentVersion')), createObject('name', 'StorageAccountName', 'value', parameters('StorageAccountName')), createObject('name', 'DcrName', 'value', parameters('DataCollectionRuleName')), createObject('name', 'DceName', 'value', parameters('DataCollectionEndpointName')), createObject('name', 'EnablePBIWorkload', 'value', '0')), if(or(not(equals(parameters('EnablePrivateNetworking'), true())), equals(parameters('EnableElasticPremiumPlan'), true())), createArray(createObject('name', 'WEBSITE_CONTENTAZUREFILECONNECTIONSTRING', 'value', format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', parameters('StorageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('StorageAccountName')), '2021-08-01').keys[0].value)), createObject('name', 'WEBSITE_CONTENTSHARE', 'value', toLower(parameters('FunctionAppName')))), createArray()))]",
          "powerShellVersion": "7.4",
          "minTlsVersion": "1.2",
          "ftpsState": "Disabled",
          "http20Enabled": true,
          "alwaysOn": "[if(or(not(equals(parameters('EnablePrivateNetworking'), true())), equals(parameters('EnableElasticPremiumPlan'), true())), false(), true())]",
          "publicNetworkAccess": "Enabled",
          "cors": {
            "allowedOrigins": [
              "https://portal.azure.com"
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', format('appInsights-{0}', parameters('FunctionAppName')))]",
        "[resourceId('Microsoft.Resources/deployments', 'createCustomTables')]",
        "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', split(format('{0}/default/{1}', parameters('StorageAccountName'), toLower(parameters('FunctionAppName'))), '/')[0], split(format('{0}/default/{1}', parameters('StorageAccountName'), toLower(parameters('FunctionAppName'))), '/')[1], split(format('{0}/default/{1}', parameters('StorageAccountName'), toLower(parameters('FunctionAppName'))), '/')[2])]",
        "[resourceId('Microsoft.Web/serverfarms', parameters('FunctionAppName'))]",
        "[resourceId('Microsoft.Resources/deployments', 'privateNetwork')]",
        "[resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', split(format('{0}/default/dlpqueue', parameters('StorageAccountName')), '/')[0], split(format('{0}/default/dlpqueue', parameters('StorageAccountName')), '/')[1], split(format('{0}/default/dlpqueue', parameters('StorageAccountName')), '/')[2])]",
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('StorageAccountName'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName')))]"
      ]
    },
    {
      "condition": "[equals(parameters('DeployFunctionCode'), true())]",
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.Web/sites/{0}', parameters('FunctionAppName'))]",
      "name": "[guid(subscription().id, resourceGroup().id, resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName'))))]",
      "properties": {
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName'))), '2022-01-31-preview').principalId]",
        "roleDefinitionId": "[variables('roleIdOwner')]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('FunctionAppName'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName')))]"
      ]
    },
    {
      "condition": "[equals(parameters('DeployApplicationInsights'), true())]",
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[format('appInsights-{0}', parameters('FunctionAppName'))]",
      "location": "[variables('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "Request_Source": "rest",
        "WorkspaceResourceId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[2], split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[8])]"
      }
    },
    {
      "condition": "[equals(parameters('DeployFunctionCode'), true())]",
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2023-08-01",
      "name": "deployCode",
      "location": "[variables('location')]",
      "kind": "AzurePowerShell",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName'))))]": {}
        }
      },
      "properties": {
        "azPowerShellVersion": "12.3",
        "retentionInterval": "PT1H",
        "timeout": "PT10M",
        "cleanupPreference": "Always",
        "environmentVariables": [
          {
            "name": "TenantId",
            "value": "[parameters('TenantID')]"
          },
          {
            "name": "ClientId",
            "value": "[parameters('ClientID')]"
          },
          {
            "name": "ClientSecret",
            "secureValue": "[parameters('ClientSecret')]"
          }
        ],
        "primaryScriptUri": "[variables('deploymentScriptUri')]",
        "arguments": "[if(equals(parameters('EnablePrivateNetworking'), true()), format('-PackageUri {0} -SubscriptionId {1} -ResourceGroupName {2} -FunctionAppName {3} -FAScope {4} -UAMIPrincipalId {5} -VnetScope {6} -RestrictedIPs \"None\"', variables('functionAppPackageUri'), split(subscription().id, '/')[2], resourceGroup().name, reference(resourceId('Microsoft.Resources/deployments', 'functionAppPe'), '2022-09-01').outputs.functionAppName.value, resourceId('Microsoft.Web/sites', parameters('FunctionAppName')), reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName'))), '2022-01-31-preview').principalId, reference(resourceId('Microsoft.Resources/deployments', 'privateNetwork'), '2022-09-01').outputs.vnetId.value), format('-PackageUri {0} -SubscriptionId {1} -ResourceGroupName {2} -FunctionAppName {3} -FAScope {4} -UAMIPrincipalId {5}', variables('functionAppPackageUri'), split(subscription().id, '/')[2], resourceGroup().name, parameters('FunctionAppName'), resourceId('Microsoft.Web/sites', parameters('FunctionAppName')), reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName'))), '2022-01-31-preview').principalId))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('FunctionAppName'))]",
        "[resourceId('Microsoft.Resources/deployments', 'functionAppDeployFilesKv')]",
        "[resourceId('Microsoft.Resources/deployments', 'functionAppPe')]",
        "[resourceId('Microsoft.Resources/deployments', 'privateNetwork')]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "createCustomTables",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "LogAnalyticsWorkspaceLocation": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[2], split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[8]), '2022-10-01', 'full').location]"
          },
          "LogAnalyticsWorkspaceResourceId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[2], split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[8])]"
          },
          "DataCollectionEndpointName": {
            "value": "[parameters('DataCollectionEndpointName')]"
          },
          "DataCollectionRuleName": {
            "value": "[parameters('DataCollectionRuleName')]"
          },
          "ServicePrincipalId": {
            "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName'))), '2022-01-31-preview').principalId]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "3611561592088083860"
            }
          },
          "parameters": {
            "DataCollectionEndpointName": {
              "type": "string",
              "defaultValue": "[format('dce-{0}', uniqueString(resourceGroup().id))]",
              "metadata": {
                "description": "Name for Data Collection Endpoint used to ingest data into Log Analytics workspace."
              }
            },
            "DataCollectionRuleName": {
              "type": "string",
              "defaultValue": "[format('dcr-{0}', uniqueString(resourceGroup().id))]",
              "metadata": {
                "description": "Name for Data Collection Rule used to ingest data into Log Analytics workspace."
              }
            },
            "LogAnalyticsWorkspaceResourceId": {
              "type": "string",
              "metadata": {
                "description": "Azure Resource Id of the Log Analytics Workspace where you like the data and optional Function App Application Insights data to reside. The format is: \"/subscriptions/xxxxxxxx-xxxxxxxx-xxxxxxxx-xxxxxxxx-xxxxxxxx/resourcegroups/xxxxxxxx/providers/microsoft.operationalinsights/workspaces/xxxxxxxx\""
              }
            },
            "LogAnalyticsWorkspaceLocation": {
              "type": "string",
              "metadata": {
                "description": "Azure location/region of the Log Analytics Workspace referenced in the LogAnalyticsWorkspaceResourceId parameter."
              }
            },
            "ServicePrincipalId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional: Managed Identity or Service Principal ID to be assigned the Metrics Publisher role on the data collection rule."
              }
            }
          },
          "variables": {
            "roleIdMonitoringMetricsPublisher": "/providers/Microsoft.Authorization/roleDefinitions/3913510d-42f4-4e42-8a64-420c390055eb"
          },
          "resources": [
            {
              "type": "Microsoft.Insights/dataCollectionEndpoints",
              "apiVersion": "2021-09-01-preview",
              "name": "[parameters('DataCollectionEndpointName')]",
              "location": "[parameters('LogAnalyticsWorkspaceLocation')]",
              "properties": {}
            },
            {
              "condition": "[not(equals(parameters('ServicePrincipalId'), ''))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-10-01-preview",
              "scope": "[format('Microsoft.Insights/dataCollectionRules/{0}', parameters('DataCollectionRuleName'))]",
              "name": "[guid(resourceId('Microsoft.Insights/dataCollectionRules', parameters('DataCollectionRuleName')), variables('roleIdMonitoringMetricsPublisher'), parameters('ServicePrincipalId'))]",
              "properties": {
                "roleDefinitionId": "[variables('roleIdMonitoringMetricsPublisher')]",
                "principalId": "[parameters('ServicePrincipalId')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Insights/dataCollectionRules', parameters('DataCollectionRuleName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/dataCollectionRules",
              "apiVersion": "2021-09-01-preview",
              "name": "[parameters('DataCollectionRuleName')]",
              "location": "[parameters('LogAnalyticsWorkspaceLocation')]",
              "properties": {
                "dataCollectionEndpointId": "[resourceId('Microsoft.Insights/dataCollectionEndpoints', parameters('DataCollectionEndpointName'))]",
                "streamDeclarations": {
                  "Custom-PurviewDLP_CL": {
                    "columns": [
                      {
                        "name": "TimeGenerated",
                        "type": "datetime"
                      },
                      {
                        "name": "CreationTime",
                        "type": "datetime"
                      },
                      {
                        "name": "Identifier",
                        "type": "string"
                      },
                      {
                        "name": "Operation",
                        "type": "string"
                      },
                      {
                        "name": "OrganizationId",
                        "type": "string"
                      },
                      {
                        "name": "RecordType",
                        "type": "int"
                      },
                      {
                        "name": "UserKey",
                        "type": "string"
                      },
                      {
                        "name": "UserType",
                        "type": "int"
                      },
                      {
                        "name": "Version",
                        "type": "int"
                      },
                      {
                        "name": "Workload",
                        "type": "string"
                      },
                      {
                        "name": "ObjectId",
                        "type": "string"
                      },
                      {
                        "name": "UserId",
                        "type": "string"
                      },
                      {
                        "name": "IncidentId",
                        "type": "string"
                      },
                      {
                        "name": "PolicyDetails",
                        "type": "dynamic"
                      },
                      {
                        "name": "SensitiveInfoDetectionIsIncluded",
                        "type": "boolean"
                      },
                      {
                        "name": "SharePointMetaData",
                        "type": "dynamic"
                      },
                      {
                        "name": "ExchangeMetaData",
                        "type": "dynamic"
                      },
                      {
                        "name": "EndpointMetaData",
                        "type": "dynamic"
                      },
                      {
                        "name": "EvidenceFile",
                        "type": "dynamic"
                      },
                      {
                        "name": "Scope",
                        "type": "int"
                      },
                      {
                        "name": "DocumentName",
                        "type": "string"
                      },
                      {
                        "name": "usageLocation",
                        "type": "string"
                      },
                      {
                        "name": "department",
                        "type": "string"
                      },
                      {
                        "name": "manager",
                        "type": "string"
                      },
                      {
                        "name": "originalContent",
                        "type": "string"
                      },
                      {
                        "name": "ExceptionInfo",
                        "type": "dynamic"
                      },
                      {
                        "name": "jobTitle",
                        "type": "string"
                      }
                    ]
                  },
                  "Custom-PurviewDLPSIT_CL": {
                    "columns": [
                      {
                        "name": "TimeGenerated",
                        "type": "datetime"
                      },
                      {
                        "name": "Identifier",
                        "type": "string"
                      },
                      {
                        "name": "ClassifierType",
                        "type": "string"
                      },
                      {
                        "name": "Confidence",
                        "type": "int"
                      },
                      {
                        "name": "Location",
                        "type": "string"
                      },
                      {
                        "name": "SensitiveInformationTypeName",
                        "type": "string"
                      },
                      {
                        "name": "SensitiveType",
                        "type": "string"
                      },
                      {
                        "name": "UniqueCount",
                        "type": "int"
                      },
                      {
                        "name": "PolicyId",
                        "type": "string"
                      },
                      {
                        "name": "RuleId",
                        "type": "string"
                      },
                      {
                        "name": "DetectionResultsTruncated",
                        "type": "boolean"
                      },
                      {
                        "name": "ClassificationAttributes",
                        "type": "dynamic"
                      },
                      {
                        "name": "SITCount",
                        "type": "int"
                      },
                      {
                        "name": "SensitiveInfoId",
                        "type": "string"
                      }
                    ]
                  },
                  "Custom-PurviewDLPDetections_CL": {
                    "columns": [
                      {
                        "name": "TimeGenerated",
                        "type": "datetime"
                      },
                      {
                        "name": "Identifier",
                        "type": "string"
                      },
                      {
                        "name": "Name",
                        "type": "string"
                      },
                      {
                        "name": "Value",
                        "type": "string"
                      },
                      {
                        "name": "SensitiveType",
                        "type": "string"
                      },
                      {
                        "name": "SensitiveInfoTypeName",
                        "type": "string"
                      },
                      {
                        "name": "SensitiveInfoId",
                        "type": "string"
                      }
                    ]
                  }
                },
                "destinations": {
                  "logAnalytics": [
                    {
                      "name": "[split(parameters('LogAnalyticsWorkspaceResourceId'), '/')[8]]",
                      "workspaceResourceId": "[parameters('LogAnalyticsWorkspaceResourceId')]"
                    }
                  ]
                },
                "dataFlows": [
                  {
                    "streams": [
                      "Custom-PurviewDLP_CL"
                    ],
                    "destinations": [
                      "[split(parameters('LogAnalyticsWorkspaceResourceId'), '/')[8]]"
                    ],
                    "transformKql": "source",
                    "outputStream": "Custom-PurviewDLP_CL"
                  },
                  {
                    "streams": [
                      "Custom-PurviewDLPSIT_CL"
                    ],
                    "destinations": [
                      "[split(parameters('LogAnalyticsWorkspaceResourceId'), '/')[8]]"
                    ],
                    "transformKql": "source",
                    "outputStream": "Custom-PurviewDLPSIT_CL"
                  },
                  {
                    "streams": [
                      "Custom-PurviewDLPDetections_CL"
                    ],
                    "destinations": [
                      "[split(parameters('LogAnalyticsWorkspaceResourceId'), '/')[8]]"
                    ],
                    "transformKql": "source",
                    "outputStream": "Custom-PurviewDLPDetections_CL"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Insights/dataCollectionEndpoints', parameters('DataCollectionEndpointName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('LogAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('LogAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.Resources/deployments', 'tablePurviewDLP')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "tablePurviewDLP",
              "subscriptionId": "[split(parameters('LogAnalyticsWorkspaceResourceId'), '/')[2]]",
              "resourceGroup": "[split(parameters('LogAnalyticsWorkspaceResourceId'), '/')[4]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "lawName": {
                    "value": "[split(parameters('LogAnalyticsWorkspaceResourceId'), '/')[8]]"
                  },
                  "tableName": {
                    "value": "PurviewDLP_CL"
                  },
                  "plan": {
                    "value": "Analytics"
                  },
                  "columns": {
                    "value": [
                      {
                        "name": "TimeGenerated",
                        "type": "datetime"
                      },
                      {
                        "name": "CreationTime",
                        "type": "datetime"
                      },
                      {
                        "name": "Identifier",
                        "type": "string"
                      },
                      {
                        "name": "Operation",
                        "type": "string"
                      },
                      {
                        "name": "OrganizationId",
                        "type": "string"
                      },
                      {
                        "name": "RecordType",
                        "type": "int"
                      },
                      {
                        "name": "UserKey",
                        "type": "string"
                      },
                      {
                        "name": "UserType",
                        "type": "int"
                      },
                      {
                        "name": "Version",
                        "type": "int"
                      },
                      {
                        "name": "Workload",
                        "type": "string"
                      },
                      {
                        "name": "ObjectId",
                        "type": "string"
                      },
                      {
                        "name": "UserId",
                        "type": "string"
                      },
                      {
                        "name": "IncidentId",
                        "type": "string"
                      },
                      {
                        "name": "PolicyDetails",
                        "type": "dynamic"
                      },
                      {
                        "name": "SensitiveInfoDetectionIsIncluded",
                        "type": "boolean"
                      },
                      {
                        "name": "SharePointMetaData",
                        "type": "dynamic"
                      },
                      {
                        "name": "ExchangeMetaData",
                        "type": "dynamic"
                      },
                      {
                        "name": "EndpointMetaData",
                        "type": "dynamic"
                      },
                      {
                        "name": "EvidenceFile",
                        "type": "dynamic"
                      },
                      {
                        "name": "Scope",
                        "type": "int"
                      },
                      {
                        "name": "DocumentName",
                        "type": "string"
                      },
                      {
                        "name": "usageLocation",
                        "type": "string"
                      },
                      {
                        "name": "department",
                        "type": "string"
                      },
                      {
                        "name": "manager",
                        "type": "string"
                      },
                      {
                        "name": "originalContent",
                        "type": "string"
                      },
                      {
                        "name": "ExceptionInfo",
                        "type": "dynamic"
                      },
                      {
                        "name": "jobTitle",
                        "type": "string"
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.32.4.45862",
                      "templateHash": "8054389020540647524"
                    }
                  },
                  "parameters": {
                    "lawName": {
                      "type": "string"
                    },
                    "tableName": {
                      "type": "string"
                    },
                    "plan": {
                      "type": "string"
                    },
                    "columns": {
                      "type": "array"
                    },
                    "retention": {
                      "type": "int",
                      "defaultValue": -1
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.OperationalInsights/workspaces/tables",
                      "apiVersion": "2022-10-01",
                      "name": "[format('{0}/{1}', parameters('lawName'), parameters('tableName'))]",
                      "properties": {
                        "schema": {
                          "name": "[parameters('tableName')]",
                          "columns": "[parameters('columns')]"
                        },
                        "plan": "[parameters('plan')]",
                        "retentionInDays": "[if(not(equals(parameters('retention'), -1)), parameters('retention'), null())]"
                      }
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "tablePurviewDLPSIT",
              "subscriptionId": "[split(parameters('LogAnalyticsWorkspaceResourceId'), '/')[2]]",
              "resourceGroup": "[split(parameters('LogAnalyticsWorkspaceResourceId'), '/')[4]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "lawName": {
                    "value": "[split(parameters('LogAnalyticsWorkspaceResourceId'), '/')[8]]"
                  },
                  "tableName": {
                    "value": "PurviewDLPSIT_CL"
                  },
                  "plan": {
                    "value": "Analytics"
                  },
                  "columns": {
                    "value": [
                      {
                        "name": "TimeGenerated",
                        "type": "datetime"
                      },
                      {
                        "name": "Identifier",
                        "type": "string"
                      },
                      {
                        "name": "ClassifierType",
                        "type": "string"
                      },
                      {
                        "name": "Confidence",
                        "type": "int"
                      },
                      {
                        "name": "Location",
                        "type": "string"
                      },
                      {
                        "name": "SensitiveInformationTypeName",
                        "type": "string"
                      },
                      {
                        "name": "UserTypeSensitiveType",
                        "type": "string"
                      },
                      {
                        "name": "UniqueCount",
                        "type": "int"
                      },
                      {
                        "name": "PolicyId",
                        "type": "string"
                      },
                      {
                        "name": "RuleId",
                        "type": "string"
                      },
                      {
                        "name": "DetectionResultsTruncated",
                        "type": "boolean"
                      },
                      {
                        "name": "ClassificationAttributes",
                        "type": "dynamic"
                      },
                      {
                        "name": "SITCount",
                        "type": "int"
                      },
                      {
                        "name": "SensitiveInfoId",
                        "type": "string"
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.32.4.45862",
                      "templateHash": "8054389020540647524"
                    }
                  },
                  "parameters": {
                    "lawName": {
                      "type": "string"
                    },
                    "tableName": {
                      "type": "string"
                    },
                    "plan": {
                      "type": "string"
                    },
                    "columns": {
                      "type": "array"
                    },
                    "retention": {
                      "type": "int",
                      "defaultValue": -1
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.OperationalInsights/workspaces/tables",
                      "apiVersion": "2022-10-01",
                      "name": "[format('{0}/{1}', parameters('lawName'), parameters('tableName'))]",
                      "properties": {
                        "schema": {
                          "name": "[parameters('tableName')]",
                          "columns": "[parameters('columns')]"
                        },
                        "plan": "[parameters('plan')]",
                        "retentionInDays": "[if(not(equals(parameters('retention'), -1)), parameters('retention'), null())]"
                      }
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "tablePurviewDLPDetections",
              "subscriptionId": "[split(parameters('LogAnalyticsWorkspaceResourceId'), '/')[2]]",
              "resourceGroup": "[split(parameters('LogAnalyticsWorkspaceResourceId'), '/')[4]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "lawName": {
                    "value": "[split(parameters('LogAnalyticsWorkspaceResourceId'), '/')[8]]"
                  },
                  "tableName": {
                    "value": "PurviewDLPDetections_CL"
                  },
                  "plan": {
                    "value": "Analytics"
                  },
                  "columns": {
                    "value": [
                      {
                        "name": "TimeGenerated",
                        "type": "datetime"
                      },
                      {
                        "name": "Identifier",
                        "type": "string"
                      },
                      {
                        "name": "Name",
                        "type": "string"
                      },
                      {
                        "name": "Value",
                        "type": "string"
                      },
                      {
                        "name": "SensitiveType",
                        "type": "string"
                      },
                      {
                        "name": "SensitiveInfoTypeName",
                        "type": "string"
                      },
                      {
                        "name": "SensitiveInfoId",
                        "type": "string"
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.32.4.45862",
                      "templateHash": "8054389020540647524"
                    }
                  },
                  "parameters": {
                    "lawName": {
                      "type": "string"
                    },
                    "tableName": {
                      "type": "string"
                    },
                    "plan": {
                      "type": "string"
                    },
                    "columns": {
                      "type": "array"
                    },
                    "retention": {
                      "type": "int",
                      "defaultValue": -1
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.OperationalInsights/workspaces/tables",
                      "apiVersion": "2022-10-01",
                      "name": "[format('{0}/{1}', parameters('lawName'), parameters('tableName'))]",
                      "properties": {
                        "schema": {
                          "name": "[parameters('tableName')]",
                          "columns": "[parameters('columns')]"
                        },
                        "plan": "[parameters('plan')]",
                        "retentionInDays": "[if(not(equals(parameters('retention'), -1)), parameters('retention'), null())]"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "outputs": {
            "DcrImmutableId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Insights/dataCollectionRules', parameters('DataCollectionRuleName')), '2021-09-01-preview').immutableId]"
            },
            "DceUri": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Insights/dataCollectionEndpoints', parameters('DataCollectionEndpointName')), '2021-09-01-preview').logsIngestion.endpoint]"
            },
            "DcrName": {
              "type": "string",
              "value": "[parameters('DataCollectionRuleName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName')))]"
      ]
    },
    {
      "condition": "[equals(parameters('DeployAzureMonitorFunction'), true())]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "purviewDLPFunction",
      "subscriptionId": "[split(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[2], split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[8]), '/')[2]]",
      "resourceGroup": "[split(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[2], split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[8]), '/')[4]]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "category": {
            "value": "DLP"
          },
          "displayName": {
            "value": "Microsoft Purview DLP"
          },
          "functionName": {
            "value": "PurviewDLP"
          },
          "lawName": {
            "value": "[split(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[2], split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[8]), '/')[8]]"
          },
          "functionAlias": {
            "value": "PurviewDLP"
          },
          "functionParams": {
            "value": "[format('WorkloadNames:dynamic = dynamic([''Exchange'', ''MicrosoftTeams'', ''SharePoint'', ''OneDrive'', ''Endpoint'']), EndpointSeverityInRuleName:bool = {0}, EndpointHighSeverityMatchCountTrigger:int = 50, EndpointSeverityDelimiter:string = '' '', ShowDetections:bool = {1}', string(parameters('EndpointSeverityInRuleName')), string(parameters('ShowSensitiveInfoDetectionValues')))]"
          },
          "query": {
            "value": "let _DetectionsMax = 5;\nlet _SITMax = 30;\nlet _EndpointSeverityInRuleName = EndpointSeverityInRuleName;\nlet _EndpointHighSeverityMatchCountTrigger = EndpointHighSeverityMatchCountTrigger;\nlet _EndpointSeverityDelimiter = EndpointSeverityDelimiter;\nlet _WorkloadNames = WorkloadNames;\nlet _ShowDetections = ShowDetections;\n\n//Get DLP data elements that are shared across all workloads.\nlet DLPCommon = PurviewDLP_CL\n| where Workload in (_WorkloadNames) and Workload != 'Endpoint' and Operation =~ 'DLPRuleMatch'\n| summarize arg_max(TimeGenerated, *) by Identifier\n| mv-expand PolicyDetails\n| where PolicyDetails.PolicyName != ''\n| mv-expand Rules = PolicyDetails.Rules\n| summarize TotalMatchCount = toint(sum(toint(Rules.ConditionsMatched.TotalCount))), arg_max(TimeGenerated, *) by Identifier\n| join kind=leftouter (PurviewDLPSIT_CL\n    | summarize arg_max(TimeGenerated, *) by Identifier, SensitiveInformationTypeName\n    | join kind=leftouter (PurviewDLPDetections_CL\n        | summarize arg_max(TimeGenerated, *) by Identifier, Name, Value, SensitiveInfoId\n        | extend Detections = bag_pack('Name', Name, 'Value', Value)\n        | summarize Detections = make_list_if(Detections, _ShowDetections == true,_DetectionsMax), arg_max(TimeGenerated, *) by SensitiveInfoId\n        ) on SensitiveInfoId\n    ) on Identifier\n| extend SensitiveInfoType = bag_pack('Name', SensitiveInformationTypeName, 'Count', toint(SITCount), 'Confidence', toint(Confidence), 'Location', Location, 'Detections', Detections)\n| extend ActionsTaken = strcat_array(Rules.Actions, ', ')\n| extend SensitiveInfoTypeString = iff(SensitiveInfoType.Count > 0, strcat(SensitiveInfoType.Name, ' (', SensitiveInfoType.Count, ', ', SensitiveInfoType.Confidence, '%)'), '')\n| summarize SensitiveInfoTypesArray = make_list_if(SensitiveInfoType, SensitiveInfoType.Count > 0, _SITMax), SensitiveInfoTypes = make_list(SensitiveInfoTypeString, _SITMax), SensitiveInfoTypeCount = count(), arg_max(TimeGenerated, *) by Identifier\n| extend\n    PolicyName = tostring(PolicyDetails.PolicyName),\n    RuleName = tostring(Rules.RuleName),\n    RuleSeverity = tostring(Rules.Severity),\n    UserPrincipalName = tolower(UserId),\n    UserObjectId = UserKey,\n    Deeplink = strcat('https://compliance.microsoft.com/datalossprevention/alerts/eventdeeplink?eventid=', Identifier, '&creationtime=', CreationTime);\n\n//Get Sharepoint and OneDrive specific data elements from common datatable defined above.\nlet DLPSPOD = DLPCommon\n| where Workload in ('SharePoint', 'OneDrive')\n| extend SensitivityLabelIds = todynamic(iff(array_length(SharePointMetaData.SensitivityLabelIds) == 0, '', SharePointMetaData.SensitivityLabelIds))\n| mv-expand SensitivityLabelId = SensitivityLabelIds\n| extend SensitivityLabelId = tostring(SensitivityLabelId)\n| join kind = leftouter (_GetWatchlist('SensitivityLabels')\n    | extend SensitivityLabelId = tostring(column_ifexists('id', '')),\n        SensitivityLabelName = tostring(column_ifexists('name', ''))\n    | summarize arg_max(LastUpdatedTimeUTC, SensitivityLabelId, SensitivityLabelName) by SensitivityLabelId) on SensitivityLabelId\n| extend OfficeObjectId = url_decode(tostring(SharePointMetaData.FilePathUrl))\n| join kind = leftouter (OfficeActivity\n    | where TimeGenerated > ago(30m)\n    | where Operation == \"AddedToSecureLink\" or Operation == \"SecureLinkUsed\"\n    | extend UserId = tolower(UserId),\n        TargetUserOrGroupName = tolower(iff(isempty(TargetUserOrGroupName), split(UserId, \"#\")[1], TargetUserOrGroupName))\n    ) on $left.UserPrincipalName == $right.UserId, OfficeObjectId\n| extend Filename = tostring(SharePointMetaData.FileName),\n    FilePath = tostring(SharePointMetaData.FilePathUrl),\n    SiteUrl = tostring(SharePointMetaData.SiteCollectionUrl),\n    ExceptionReason = tostring(SharePointMetaData.ExceptionInfo.Reason)\n| summarize SensitivityLabels = make_list(SensitivityLabelName), arg_max(TimeGenerated, *) by Identifier;\n\n//Get Exchange and Teams specific data elements from common datatable defined above.\nlet DLPEXOT = DLPCommon\n| where Workload in ('Exchange', 'MicrosoftTeams')\n| extend Recipients = iff(Workload == 'Exchange', tostring(strcat(array_strcat(ExchangeMetaData.To, ', '), iff(array_length(ExchangeMetaData.CC) == 0, '', \", \"), array_strcat(ExchangeMetaData.CC, ', '), iff(array_length(ExchangeMetaData.BCC) == 0, '', \", \"))), tostring(strcat_array(ExchangeMetaData.To, ', '))),\n    InternetMessageId = replace_string(replace_string(tostring(ExchangeMetaData.MessageID), '<', ''), '>',''),\n    EmailSubject = tostring(ExchangeMetaData.Subject),\n    Sender = UserPrincipalName,\n    ExceptionReason = tostring(ExchangeMetaData.ExceptionInfo.Reason),\n    ExceptionJustification = tostring(ExchangeMetaData.ExceptionInfo.Justification)\n| summarize DetectedLocations = make_set(SensitiveInfoType.Location), arg_max(TimeGenerated, *) by Identifier;\n\n//Define datatable so we can lookup Endpoint DLP action names from their Id.\nlet EndpointAction = datatable(ActionName: string, ActionId: int) [\n    \"None\", \"0\",\n    \"Audit\", \"1\",\n    \"Warn\", \"2\",\n    \"WarnAndBypass\", \"3\",\n    \"Block\", \"4\",\n    \"Allow\", \"5\"\n];\n//Array to match severity as the last word in rule name if present.\nlet EndpointSeverities = dynamic(['Low', 'Medium', 'High']);\n\n//Get Endpoint specific data elements from common datatable defined above.\nlet DLPEndpoint = PurviewDLP_CL\n| where Workload in ('Endpoint') and 'Endpoint' in (_WorkloadNames) and  Operation =~ 'DLPRuleMatch'\n| summarize arg_max(TimeGenerated, *) by Identifier\n| extend IngestionTime = ingestion_time()\n| mv-expand PolicyDetails\n| where PolicyDetails.PolicyName != ''\n| mv-expand Rules = PolicyDetails.Rules\n| join kind=leftouter (PurviewDLPSIT_CL\n    | summarize arg_max(TimeGenerated, *) by Identifier, SensitiveInformationTypeName\n    | join kind=leftouter (PurviewDLPDetections_CL\n        | summarize arg_max(TimeGenerated, *) by Identifier, Name, Value\n        | extend Detections = bag_pack('Name', Name, 'Value', Value)\n        | summarize Detections = make_list_if(Detections, _ShowDetections == true, _DetectionsMax), arg_max(TimeGenerated, *) by SensitiveInfoId\n        ) on SensitiveInfoId\n    ) on Identifier\n| extend SensitiveInfoType = bag_pack('Name', SensitiveInformationTypeName, 'Count', toint(SITCount), 'Confidence', toint(Confidence), 'Location', Location, 'Detections', Detections)\n| extend SensitiveInfoType = bag_pack('Name', SensitiveInformationTypeName, 'Count', toint(SITCount), 'Confidence', toint(Confidence)),\n    DeviceFullName = tostring(EndpointMetaData.DeviceName)\n| extend TotalMatchCount = toint(EndpointMetaData.SensitiveInfoTypeTotalCount)\n| extend RuleSplit = split(tostring(Rules.RuleName), _EndpointSeverityDelimiter)\n| extend RuleLength = array_length(RuleSplit)\n| extend RuleSeverity = iff(RuleSplit[RuleLength - 1] in (EndpointSeverities) and _EndpointSeverityInRuleName == true, RuleSplit[RuleLength - 1], iff(TotalMatchCount >= _EndpointHighSeverityMatchCountTrigger and _EndpointSeverityInRuleName == false, 'High', 'Medium'))\n| extend Exception = tostring(EndpointMetaData.Justification)\n| extend ExceptionReason = substring(Exception, indexof(Exception, '_') + 1)\n| extend ExceptionReason = substring(ExceptionReason, 0, indexof(ExceptionReason, ':'))\n| extend ExceptionJustification = substring(Exception, indexof(Exception, ':') + 1)\n| extend SensitiveInfoTypeString = iff(SensitiveInfoType.Count > 0, strcat(SensitiveInfoType.Name, ' (', SensitiveInfoType.Count, ', ', SensitiveInfoType.Confidence, '%)'), ''),\n    ActionId = toint(EndpointMetaData.EnforcementMode),\n    ClientIP = tostring(EndpointMetaData.ClientIP),\n    DeviceHostName = tostring(split(DeviceFullName, '.')[0]), \n    DeviceDNSName = tostring(substring(DeviceFullName, indexof(DeviceFullName, '.')+1)),\n    Filename = DocumentName,\n    FilePath = ObjectId,\n    FileHash = tostring(EndpointMetaData.Sha256),\n    FileHashAlgorithm = 'SHA256',\n    RMSEncrypted = tostring(EndpointMetaData.RMSEncrypted),\n    EvidenceFileUrl = tostring(EvidenceFile.FullUrl),\n    SourceLocationType = tostring(EndpointMetaData.SourceLocationType), \n    EndpointOperation = tostring(EndpointMetaData.EndpointOperation),\n    EndpointApplication = tostring(EndpointMetaData.Application),\n    EndpointClientIp = tostring(EndpointMetaData.ClientIP),\n    PolicyName = tostring(PolicyDetails.PolicyName),\n    RuleName = tostring(Rules.RuleName),\n    UserPrincipalName = tolower(UserId),\n    UserObjectId = UserKey,\n    Deeplink = strcat('https://compliance.microsoft.com/datalossprevention/alerts/eventdeeplink?eventid=', Identifier, '&creationtime=', CreationTime)\n| join kind = inner(EndpointAction) on ActionId\n| extend ActionsTaken = ActionName\n| summarize SensitiveInfoTypesArray = make_list_if(SensitiveInfoType, SensitiveInfoType.Count > 0, _SITMax), SensitiveInfoTypes = make_list(SensitiveInfoTypeString, _SITMax), SensitiveInfoTypeCount = count(), arg_max(TimeGenerated, *) by Identifier;\n\n//Merge all the SharePoint/OneDrive, Exchange/Teams, and Endpoints results together.\nunion DLPSPOD, DLPEXOT, DLPEndpoint\n| extend FileDirectory = parse_path(FilePath).DirectoryPath\n| project \n//Common attributes\nTimeGenerated, CreationTime, \nCreationTimeString = strcat(format_datetime(CreationTime,'M/d/yyyy, H:mm:ss tt'), ' (UTC)'),\nIdentifier, Workload, Deeplink, usageLocation, UserPrincipalName, UserObjectId, department, manager, jobTitle, PolicyName, RuleName, ActionsTaken, SensitiveInfoTypesArray = iff(array_length(SensitiveInfoTypesArray) > 0, SensitiveInfoTypesArray, ''), TotalMatchCount, \nUsername = split(UserPrincipalName, '@')[0], UPNSuffix =split(UserPrincipalName, '@')[1],\nRuleSeverity,\nSensitiveInfoTypes = iff(array_length(SensitiveInfoTypes) > 1, strcat(SensitiveInfoTypes[0], ' +', SensitiveInfoTypeCount - 1, ' more'), strcat_array(SensitiveInfoTypes, ', ')),\n//Endpoint specific attributes\nDeviceFullName, DeviceHostName, DeviceDNSName, Filename, FilePath, FileDirectory, FileHash, FileHashAlgorithm, RMSEncrypted, EvidenceFileUrl, SourceLocationType, EndpointOperation, EndpointApplication, EndpointClientIp, Operation,\n//Exchange and Teams specific attributes\nRecipients, InternetMessageId, EmailSubject, Sender, ExceptionReason, ExceptionJustification,\n//SharePoint and OneDrive specific attributes\nSiteUrl, TargetUserOrGroupName,\nDetectedLocations = strcat_array(DetectedLocations, ', '), SensitivityLabels = strcat_array(SensitivityLabels, ', ')\n| order by CreationTime"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "12233353017954708531"
            }
          },
          "parameters": {
            "lawName": {
              "type": "string"
            },
            "functionName": {
              "type": "string"
            },
            "category": {
              "type": "string"
            },
            "displayName": {
              "type": "string"
            },
            "query": {
              "type": "string"
            },
            "functionParams": {
              "type": "string",
              "defaultValue": ""
            },
            "functionAlias": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "apiVersion": "2020-08-01",
              "name": "[format('{0}/{1}', parameters('lawName'), parameters('functionName'))]",
              "properties": {
                "category": "[parameters('category')]",
                "displayName": "[parameters('displayName')]",
                "query": "[parameters('query')]",
                "functionParameters": "[parameters('functionParams')]",
                "functionAlias": "[parameters('functionAlias')]",
                "etag": "*"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'createCustomTables')]"
      ]
    },
    {
      "condition": "[or(not(equals(parameters('EnablePrivateNetworking'), true())), equals(parameters('EnableElasticPremiumPlan'), true()))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "functionAppDeployFilesKv",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "AppSettings": {
            "value": "[concat(createArray(createObject('name', 'AzureWebJobsStorage', 'value', format('@Microsoft.KeyVault(VaultName={0};SecretName=StorageAccountConnectionString)', parameters('KeyVaultName'))), createObject('name', 'AzureWebJobsSecretStorageType', 'value', 'keyvault'), createObject('name', 'AzureWebJobsSecretStorageKeyVaultUri', 'value', format('https://{0}{1}/', parameters('KeyVaultName'), environment().suffixes.keyvaultDns)), createObject('name', 'AzureWebJobsSecretStorageKeyVaultClientId', 'value', reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName'))), '2022-01-31-preview').clientId), createObject('name', 'FUNCTIONS_EXTENSION_VERSION', 'value', '~4'), createObject('name', 'APPINSIGHTS_INSTRUMENTATIONKEY', 'value', if(equals(parameters('DeployApplicationInsights'), true()), reference(resourceId('Microsoft.Insights/components', format('appInsights-{0}', parameters('FunctionAppName'))), '2020-02-02').InstrumentationKey, '')), createObject('name', 'FUNCTIONS_WORKER_RUNTIME', 'value', 'powershell'), createObject('name', 'WEBSITE_RUN_FROM_PACKAGE', 'value', '1'), createObject('name', 'AzureWebJobs.SyncDLPAnalyticsRules.Disabled', 'value', if(equals(parameters('DLPPolicySync'), false()), '1', '0')), createObject('name', 'AzureWebJobs.SyncSensitivityLabels.Disabled', 'value', if(equals(parameters('SensitivityLabelSync'), false()), '1', '0')), createObject('name', 'ClientID', 'value', parameters('ClientID')), createObject('name', 'ClientSecret', 'value', format('@Microsoft.KeyVault(VaultName={0};SecretName=ClientSecret)', parameters('KeyVaultName'))), createObject('name', 'ContentTypes', 'value', 'DLP.ALL'), createObject('name', 'customLogName', 'value', 'PurviewDLP'), createObject('name', 'domains', 'value', parameters('InternalDomainNames')), createObject('name', 'storageQueue', 'value', 'dlpqueue'), createObject('name', 'TenantGuid', 'value', parameters('TenantID')), createObject('name', 'SentinelWorkspace', 'value', split(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[2], split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[8]), '/')[8]), createObject('name', 'UamiClientId', 'value', reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName'))), '2022-01-31-preview').clientId), createObject('name', 'DcrImmutableId', 'value', reference(resourceId('Microsoft.Resources/deployments', 'createCustomTables'), '2022-09-01').outputs.DcrImmutableId.value), createObject('name', 'DceUri', 'value', reference(resourceId('Microsoft.Resources/deployments', 'createCustomTables'), '2022-09-01').outputs.DceUri.value), createObject('name', 'LawResourceId', 'value', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[2], split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[8])), createObject('name', 'SensitiveDataHandling', 'value', parameters('SensitiveDataHandling')), createObject('name', 'DeploymentVersion', 'value', variables('deploymentVersion')), createObject('name', 'StorageAccountName', 'value', parameters('StorageAccountName')), createObject('name', 'DcrName', 'value', parameters('DataCollectionRuleName')), createObject('name', 'DceName', 'value', parameters('DataCollectionEndpointName')), createObject('name', 'EnablePBIWorkload', 'value', '0')), variables('appSettingsFilesKv'))]"
          },
          "EnablePrivateNetworking": {
            "value": "[parameters('EnablePrivateNetworking')]"
          },
          "FunctionAppName": {
            "value": "[parameters('FunctionAppName')]"
          },
          "FunctionAppSubnetId": "[if(equals(parameters('EnablePrivateNetworking'), true()), createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'privateNetwork'), '2022-09-01').outputs.functionAppSubnetId.value), createObject('value', ''))]",
          "HostingPlanId": {
            "value": "[resourceId('Microsoft.Web/serverfarms', parameters('FunctionAppName'))]"
          },
          "Location": {
            "value": "[variables('location')]"
          },
          "UserAssignedMiId": {
            "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName')))]"
          },
          "AlwaysOn": {
            "value": false
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "12059403679152873734"
            }
          },
          "parameters": {
            "FunctionAppName": {
              "type": "string"
            },
            "Location": {
              "type": "string"
            },
            "UserAssignedMiId": {
              "type": "string"
            },
            "HostingPlanId": {
              "type": "string"
            },
            "EnablePrivateNetworking": {
              "type": "bool"
            },
            "FunctionAppSubnetId": {
              "type": "string",
              "defaultValue": ""
            },
            "AppSettings": {
              "type": "array"
            },
            "AlwaysOn": {
              "type": "bool"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2024-04-01",
              "name": "[parameters('FunctionAppName')]",
              "location": "[parameters('Location')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', parameters('UserAssignedMiId'))]": {}
                }
              },
              "kind": "functionapp",
              "properties": {
                "serverFarmId": "[parameters('HostingPlanId')]",
                "keyVaultReferenceIdentity": "[parameters('UserAssignedMiId')]",
                "httpsOnly": true,
                "clientCertEnabled": true,
                "clientCertMode": "OptionalInteractiveUser",
                "virtualNetworkSubnetId": "[if(equals(parameters('EnablePrivateNetworking'), true()), parameters('FunctionAppSubnetId'), null())]",
                "vnetContentShareEnabled": "[if(equals(parameters('EnablePrivateNetworking'), true()), true(), false())]",
                "vnetRouteAllEnabled": "[if(equals(parameters('EnablePrivateNetworking'), true()), true(), false())]",
                "siteConfig": {
                  "appSettings": "[parameters('AppSettings')]",
                  "powerShellVersion": "7.4",
                  "minTlsVersion": "1.2",
                  "ftpsState": "Disabled",
                  "http20Enabled": true,
                  "alwaysOn": "[parameters('AlwaysOn')]",
                  "publicNetworkAccess": "Enabled",
                  "cors": {
                    "allowedOrigins": [
                      "https://portal.azure.com"
                    ]
                  }
                }
              }
            }
          ],
          "outputs": {
            "functionAppName": {
              "type": "string",
              "value": "[parameters('FunctionAppName')]"
            },
            "functionAppId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/sites', parameters('FunctionAppName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', format('appInsights-{0}', parameters('FunctionAppName')))]",
        "[resourceId('Microsoft.Resources/deployments', 'createCustomTables')]",
        "[resourceId('Microsoft.Web/sites', parameters('FunctionAppName'))]",
        "[resourceId('Microsoft.Web/serverfarms', parameters('FunctionAppName'))]",
        "[resourceId('Microsoft.Resources/deployments', 'privateNetwork')]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName')))]"
      ]
    },
    {
      "condition": "[or(equals(parameters('DLPPolicySync'), true()), equals(parameters('SensitivityLabelSync'), true()))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "rbacAssignmentLaw",
      "subscriptionId": "[split(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[2], split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[8]), '/')[2]]",
      "resourceGroup": "[split(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[2], split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[8]), '/')[4]]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName'))), '2022-01-31-preview').principalId]"
          },
          "lawName": {
            "value": "[split(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[2], split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[8]), '/')[8]]"
          },
          "roleName": {
            "value": "[parameters('CustomRoleName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "13775955107872191763"
            }
          },
          "parameters": {
            "lawName": {
              "type": "string"
            },
            "principalId": {
              "type": "string"
            },
            "roleName": {
              "type": "string",
              "defaultValue": "Custom Role - Sentinel DLP Contributor"
            },
            "actions": {
              "type": "array",
              "defaultValue": [
                "Microsoft.SecurityInsights/alertRules/write",
                "Microsoft.SecurityInsights/alertRules/read",
                "Microsoft.OperationalInsights/workspaces/read",
                "Microsoft.OperationalInsights/workspaces/query/read",
                "Microsoft.OperationalInsights/workspaces/analytics/query/action",
                "Microsoft.OperationalInsights/workspaces/search/action"
              ],
              "metadata": {
                "description": "Array of actions for the roleDefinition"
              }
            },
            "notActions": {
              "type": "array",
              "defaultValue": [
                "Microsoft.OperationalInsights/workspaces/sharedKeys/read"
              ],
              "metadata": {
                "description": "Array of notActions for the roleDefinition"
              }
            }
          },
          "variables": {
            "roleDescription": "Provides access to query Sentinel Watchlists and alert rules. Also provides limited permissions to read workspace details and run a query in the workspace, but not to read data from any tables.",
            "roleDefName": "[guid(resourceGroup().id, string(parameters('actions')), string(parameters('notActions')))]",
            "roleIdReader": "/providers/Microsoft.Authorization/roleDefinitions/acdd72a7-3385-48ef-bd42-f606fba81ae7"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleDefinitions",
              "apiVersion": "2022-04-01",
              "name": "[variables('roleDefName')]",
              "properties": {
                "roleName": "[parameters('roleName')]",
                "description": "[variables('roleDescription')]",
                "type": "customRole",
                "permissions": [
                  {
                    "actions": "[parameters('actions')]",
                    "notActions": "[parameters('notActions')]"
                  }
                ],
                "assignableScopes": [
                  "[resourceGroup().id]"
                ]
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('lawName'))]",
              "name": "[guid(resourceId('Microsoft.OperationalInsights/workspaces', parameters('lawName')), resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefName')), parameters('principalId'))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefName'))]",
                "principalId": "[parameters('principalId')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}/tables/{1}', parameters('lawName'), 'PurviewDLP_CL')]",
              "name": "[guid(resourceId('Microsoft.OperationalInsights/workspaces/tables', parameters('lawName'), 'PurviewDLP_CL'), variables('roleIdReader'), parameters('principalId'))]",
              "properties": {
                "roleDefinitionId": "[variables('roleIdReader')]",
                "principalId": "[parameters('principalId')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}/tables/{1}', parameters('lawName'), 'Watchlist')]",
              "name": "[guid(resourceId('Microsoft.OperationalInsights/workspaces/tables', parameters('lawName'), 'Watchlist'), variables('roleIdReader'), parameters('principalId'))]",
              "properties": {
                "roleDefinitionId": "[variables('roleIdReader')]",
                "principalId": "[parameters('principalId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'createCustomTables')]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName')))]"
      ]
    },
    {
      "condition": "[or(equals(parameters('DLPPolicySync'), true()), equals(parameters('SensitivityLabelSync'), true()))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "sentinelWatchlists",
      "subscriptionId": "[split(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[2], split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[8]), '/')[2]]",
      "resourceGroup": "[split(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[2], split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[8]), '/')[4]]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "lawName": {
            "value": "[split(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[2], split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[8]), '/')[8]]"
          },
          "policySync": {
            "value": "[parameters('DLPPolicySync')]"
          },
          "labelSync": {
            "value": "[parameters('SensitivityLabelSync')]"
          },
          "principalId": {
            "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName'))), '2022-01-31-preview').principalId]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "13070640207171491394"
            }
          },
          "parameters": {
            "lawName": {
              "type": "string"
            },
            "policySync": {
              "type": "bool",
              "defaultValue": false
            },
            "labelSync": {
              "type": "bool",
              "defaultValue": true
            },
            "principalId": {
              "type": "string"
            }
          },
          "variables": {
            "roleIdContributor": "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c"
          },
          "resources": [
            {
              "condition": "[equals(parameters('policySync'), true())]",
              "type": "Microsoft.SecurityInsights/watchlists",
              "apiVersion": "2023-02-01",
              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('lawName'))]",
              "name": "Policy",
              "properties": {
                "displayName": "Policy",
                "itemsSearchKey": "Name",
                "provider": "DLP",
                "source": "DLP",
                "contentType": "text/csv",
                "numberOfLinesToSkip": 0,
                "description": "DLP Policies",
                "rawContent": "Name,Workload\r\n40489b3c-b060-4122-af94-5dbe51996729,40489b3c-b060-4122-af94-5dbe51996729\r\n"
              }
            },
            {
              "condition": "[equals(parameters('labelSync'), true())]",
              "type": "Microsoft.SecurityInsights/watchlists",
              "apiVersion": "2023-02-01",
              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('lawName'))]",
              "name": "SensitivityLabels",
              "properties": {
                "displayName": "SensitivityLabels",
                "itemsSearchKey": "id",
                "provider": "DLP",
                "source": "DLP",
                "contentType": "text/csv",
                "numberOfLinesToSkip": 0,
                "description": "Sensitivity Labels",
                "rawContent": "id,name,parent\r\n40489b3c-b060-4122-af94-5dbe51996729,40489b3c-b060-4122-af94-5dbe51996729,40489b3c-b060-4122-af94-5dbe51996729\r\n"
              }
            },
            {
              "condition": "[equals(parameters('policySync'), true())]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[extensionResourceId(format('Microsoft.OperationalInsights/workspaces/{0}', parameters('lawName')), 'Microsoft.SecurityInsights/watchlists', 'Policy')]",
              "name": "[guid(extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('lawName')), 'Microsoft.SecurityInsights/watchlists', 'Policy'), variables('roleIdContributor'), parameters('principalId'))]",
              "properties": {
                "principalId": "[parameters('principalId')]",
                "roleDefinitionId": "[variables('roleIdContributor')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('lawName')), 'Microsoft.SecurityInsights/watchlists', 'Policy')]"
              ]
            },
            {
              "condition": "[equals(parameters('labelSync'), true())]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[extensionResourceId(format('Microsoft.OperationalInsights/workspaces/{0}', parameters('lawName')), 'Microsoft.SecurityInsights/watchlists', 'SensitivityLabels')]",
              "name": "[guid(extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('lawName')), 'Microsoft.SecurityInsights/watchlists', 'SensitivityLabels'), variables('roleIdContributor'), parameters('principalId'))]",
              "properties": {
                "principalId": "[parameters('principalId')]",
                "roleDefinitionId": "[variables('roleIdContributor')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('lawName')), 'Microsoft.SecurityInsights/watchlists', 'SensitivityLabels')]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName')))]"
      ]
    },
    {
      "condition": "[equals(parameters('DeployAnalyticsRules'), true())]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "sentinelRules",
      "subscriptionId": "[split(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[2], split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[8]), '/')[2]]",
      "resourceGroup": "[split(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[2], split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[8]), '/')[4]]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "lawId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[2], split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[8])]"
          },
          "policySync": {
            "value": "[parameters('DLPPolicySync')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "17498875050434650579"
            }
          },
          "parameters": {
            "lawId": {
              "type": "string"
            },
            "policySync": {
              "type": "bool",
              "defaultValue": false
            },
            "guids": {
              "type": "array",
              "defaultValue": [
                "[guid(parameters('lawId'), '21a0c0e5-7633-4e0f-945d-886d653d658a')]",
                "[guid(parameters('lawId'), 'c484978b-7cf8-4034-a49c-3ff347234842')]",
                "[guid(parameters('lawId'), 'adcc3e90-dfda-44e0-b2fa-c34364bb7f70')]",
                "[guid(parameters('lawId'), 'e2a469c4-9c65-4d82-9b48-f0662971a09e')]",
                "[guid(parameters('lawId'), '53be747c-c4f7-49d0-9386-62371514a283')]",
                "[guid(parameters('lawId'), 'f76a9cbd-fe00-42f2-815d-421de9c0cc04')]"
              ]
            }
          },
          "variables": {
            "$fxv#0": [
              {
                "Alias": "SPOD",
                "Names": [
                  "SharePoint",
                  "OneDrive"
                ]
              },
              {
                "Alias": "EXOT",
                "Names": [
                  "Exchange",
                  "MicrosoftTeams"
                ]
              },
              {
                "Alias": "Endpoint",
                "Names": [
                  "Endpoint"
                ]
              }
            ],
            "workloads": "[variables('$fxv#0')]",
            "querySyncVar1": "let Workloads = dynamic(WORKLOADSREPLACE);\r\n",
            "querySyncVar2": "let WorkloadAlias = \"WORKLOADALIASREPLACE\";\r\n",
            "querySync": "let AlertProductName = \"Microsoft Data Loss Prevention (Custom)\";\r\n\r\nlet PolicyWatchlist = _GetWatchlist(\"Policy\")\r\n    | extend Workload = column_ifexists(\"Workload\", \"\"), Name = column_ifexists(\"Name\", \"\")\r\n    | where Workload == WorkloadAlias\r\n    | project SearchKey;\r\n\r\nPurviewDLP(Workloads, true)\r\n| where PolicyName != \"\" //Do Not Remove\r\n| where not(PolicyName has_any (PolicyWatchlist)) //Do not remove\r\n| extend Product = AlertProductName\r\n| order by TimeGenerated",
            "queryAll": "let AlertProductName = \"Microsoft Data Loss Prevention (Custom)\";\r\n\r\nPurviewDLP\r\n| extend Product = AlertProductName\r\n| order by TimeGenerated"
          },
          "resources": [
            {
              "condition": "[equals(parameters('policySync'), false())]",
              "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
              "apiVersion": "2022-11-01-preview",
              "name": "[format('{0}/Microsoft.SecurityInsights/{1}', split(parameters('lawId'), '/')[8], guid(parameters('lawId'), 'e4243705-c479-4e14-8443-7bad89119ba5'))]",
              "kind": "Scheduled",
              "properties": {
                "displayName": "Microsoft DLP Incident Creation",
                "description": "",
                "severity": "Medium",
                "enabled": true,
                "query": "[variables('queryAll')]",
                "queryFrequency": "PT5M",
                "queryPeriod": "PT5M",
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "suppressionDuration": "PT5H",
                "suppressionEnabled": false,
                "startTimeUtc": null,
                "tactics": [
                  "Exfiltration"
                ],
                "techniques": [],
                "alertRuleTemplateName": null,
                "incidentConfiguration": {
                  "createIncident": true,
                  "groupingConfiguration": {
                    "enabled": true,
                    "reopenClosedIncident": true,
                    "lookbackDuration": "PT45M",
                    "matchingMethod": "Selected",
                    "groupByEntities": [
                      "Account"
                    ],
                    "groupByAlertDetails": [],
                    "groupByCustomDetails": []
                  }
                },
                "eventGroupingSettings": {
                  "aggregationKind": "AlertPerResult"
                },
                "alertDetailsOverride": {
                  "alertDisplayNameFormat": "{{RuleName}} ({{Workload}})",
                  "alertDescriptionFormat": "Microsoft Purview DLP ({{Workload}}) alert for {{UserPrincipalName}}. Use the alert link to view more details about the events within the alert.",
                  "alertSeverityColumnName": "RuleSeverity",
                  "alertDynamicProperties": [
                    {
                      "alertProperty": "AlertLink",
                      "value": "Deeplink"
                    },
                    {
                      "alertProperty": "ProductName",
                      "value": "Product"
                    }
                  ]
                },
                "customDetails": {
                  "CreationTime": "CreationTimeString",
                  "User": "UserPrincipalName",
                  "JobTitle": "jobTitle",
                  "Department": "department",
                  "Manager": "manager",
                  "Location": "usageLocation",
                  "Workload": "Workload",
                  "MatchCount": "TotalMatchCount",
                  "SensitiveInfo": "SensitiveInfoTypes",
                  "ActionsTaken": "ActionsTaken",
                  "SharedWith": "TargetUserOrGroupName",
                  "DetectedLocations": "DetectedLocations",
                  "SensitivityLabels": "SensitivityLabels",
                  "Subject": "EmailSubject",
                  "Operation": "EndpointOperation",
                  "Application": "EndpointApplication"
                },
                "entityMappings": [
                  {
                    "entityType": "Account",
                    "fieldMappings": [
                      {
                        "identifier": "AadUserId",
                        "columnName": "UserObjectId"
                      },
                      {
                        "identifier": "Name",
                        "columnName": "Username"
                      },
                      {
                        "identifier": "UPNSuffix",
                        "columnName": "UPNSuffix"
                      }
                    ]
                  },
                  {
                    "entityType": "File",
                    "fieldMappings": [
                      {
                        "identifier": "Name",
                        "columnName": "Filename"
                      },
                      {
                        "identifier": "Directory",
                        "columnName": "FileDirectory"
                      }
                    ]
                  },
                  {
                    "entityType": "MailMessage",
                    "fieldMappings": [
                      {
                        "identifier": "InternetMessageId",
                        "columnName": "InternetMessageId"
                      },
                      {
                        "identifier": "Recipient",
                        "columnName": "Recipients"
                      },
                      {
                        "identifier": "Sender",
                        "columnName": "Sender"
                      }
                    ]
                  },
                  {
                    "entityType": "FileHash",
                    "fieldMappings": [
                      {
                        "identifier": "Algorithm",
                        "columnName": "FileHashAlgorithm"
                      },
                      {
                        "identifier": "Value",
                        "columnName": "FileHash"
                      }
                    ]
                  },
                  {
                    "entityType": "Host",
                    "fieldMappings": [
                      {
                        "identifier": "DnsDomain",
                        "columnName": "DeviceDNSName"
                      },
                      {
                        "identifier": "HostName",
                        "columnName": "DeviceHostName"
                      },
                      {
                        "identifier": "FullName",
                        "columnName": "DeviceFullName"
                      }
                    ]
                  }
                ],
                "sentinelEntitiesMappings": null,
                "templateVersion": null
              }
            },
            {
              "copy": {
                "name": "sentinelRuleSync",
                "count": "[length(variables('workloads'))]"
              },
              "condition": "[equals(parameters('policySync'), true())]",
              "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
              "apiVersion": "2022-11-01-preview",
              "name": "[format('{0}/Microsoft.SecurityInsights/{1}', split(parameters('lawId'), '/')[8], parameters('guids')[copyIndex()])]",
              "kind": "Scheduled",
              "properties": {
                "displayName": "[format('Microsoft DLP Incident Creation Template ({0})', variables('workloads')[copyIndex()].Alias)]",
                "description": "",
                "severity": "Medium",
                "enabled": true,
                "query": "[concat(replace(variables('querySyncVar1'), 'WORKLOADSREPLACE', string(variables('workloads')[copyIndex()].Names)), replace(variables('querySyncVar2'), 'WORKLOADALIASREPLACE', variables('workloads')[copyIndex()].Alias), variables('querySync'))]",
                "queryFrequency": "PT5M",
                "queryPeriod": "PT5M",
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "suppressionDuration": "PT5H",
                "suppressionEnabled": false,
                "startTimeUtc": null,
                "tactics": [
                  "Exfiltration"
                ],
                "techniques": [],
                "alertRuleTemplateName": null,
                "incidentConfiguration": {
                  "createIncident": true,
                  "groupingConfiguration": {
                    "enabled": true,
                    "reopenClosedIncident": true,
                    "lookbackDuration": "PT45M",
                    "matchingMethod": "Selected",
                    "groupByEntities": [
                      "Account"
                    ],
                    "groupByAlertDetails": [],
                    "groupByCustomDetails": []
                  }
                },
                "eventGroupingSettings": {
                  "aggregationKind": "AlertPerResult"
                },
                "alertDetailsOverride": {
                  "alertDisplayNameFormat": "{{RuleName}} ({{Workload}})",
                  "alertDescriptionFormat": "Microsoft Purview DLP ({{Workload}}) alert for {{UserPrincipalName}}. Use the alert link to view more details about the events within the alert.",
                  "alertSeverityColumnName": "RuleSeverity",
                  "alertDynamicProperties": [
                    {
                      "alertProperty": "AlertLink",
                      "value": "Deeplink"
                    },
                    {
                      "alertProperty": "ProductName",
                      "value": "Product"
                    }
                  ]
                },
                "customDetails": {
                  "CreationTime": "CreationTimeString",
                  "User": "UserPrincipalName",
                  "JobTitle": "jobTitle",
                  "Department": "department",
                  "Manager": "manager",
                  "Location": "usageLocation",
                  "Workload": "Workload",
                  "MatchCount": "TotalMatchCount",
                  "SensitiveInfo": "SensitiveInfoTypes",
                  "ActionsTaken": "ActionsTaken",
                  "SharedWith": "TargetUserOrGroupName",
                  "DetectedLocations": "DetectedLocations",
                  "SensitivityLabels": "SensitivityLabels",
                  "Subject": "EmailSubject",
                  "Operation": "EndpointOperation",
                  "Application": "EndpointApplication"
                },
                "entityMappings": "[if(equals(variables('workloads')[copyIndex()].Alias, 'EXOT'), createArray(createObject('entityType', 'Account', 'fieldMappings', createArray(createObject('identifier', 'AadUserId', 'columnName', 'UserObjectId'), createObject('identifier', 'Name', 'columnName', 'Username'), createObject('identifier', 'UPNSuffix', 'columnName', 'UserPrincipalName'))), createObject('entityType', 'File', 'fieldMappings', createArray(createObject('identifier', 'Name', 'columnName', 'Filename'), createObject('identifier', 'Directory', 'columnName', 'FileDirectory'))), createObject('entityType', 'MailMessage', 'fieldMappings', createArray(createObject('identifier', 'InternetMessageId', 'columnName', 'InternetMessageId'), createObject('identifier', 'Recipient', 'columnName', 'Recipients'), createObject('identifier', 'Sender', 'columnName', 'Sender'))), createObject('entityType', 'FileHash', 'fieldMappings', createArray(createObject('identifier', 'Algorithm', 'columnName', 'FileHashAlgorithm'), createObject('identifier', 'Value', 'columnName', 'FileHash'))), createObject('entityType', 'Host', 'fieldMappings', createArray(createObject('identifier', 'DnsDomain', 'columnName', 'DeviceDNSName'), createObject('identifier', 'HostName', 'columnName', 'DeviceHostName'), createObject('identifier', 'FullName', 'columnName', 'DeviceFullName')))), createArray(createObject('entityType', 'Account', 'fieldMappings', createArray(createObject('identifier', 'AadUserId', 'columnName', 'UserObjectId'), createObject('identifier', 'Name', 'columnName', 'Username'), createObject('identifier', 'UPNSuffix', 'columnName', 'UserPrincipalName'))), createObject('entityType', 'File', 'fieldMappings', createArray(createObject('identifier', 'Name', 'columnName', 'Filename'), createObject('identifier', 'Directory', 'columnName', 'FileDirectory'))), createObject('entityType', 'FileHash', 'fieldMappings', createArray(createObject('identifier', 'Algorithm', 'columnName', 'FileHashAlgorithm'), createObject('identifier', 'Value', 'columnName', 'FileHash'))), createObject('entityType', 'Host', 'fieldMappings', createArray(createObject('identifier', 'DnsDomain', 'columnName', 'DeviceDNSName'), createObject('identifier', 'HostName', 'columnName', 'DeviceHostName'), createObject('identifier', 'FullName', 'columnName', 'DeviceFullName')))))]",
                "sentinelEntitiesMappings": null,
                "templateVersion": null
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'createCustomTables')]",
        "[resourceId('Microsoft.Web/sites', parameters('FunctionAppName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[2], split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[8]), '/')[2], split(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[2], split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[8]), '/')[4]), 'Microsoft.Resources/deployments', 'purviewDLPFunction')]"
      ]
    },
    {
      "condition": "[equals(parameters('DeployWorkbooks'), true())]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "sentinelWorkbooks",
      "subscriptionId": "[split(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[2], split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[8]), '/')[2]]",
      "resourceGroup": "[split(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[2], split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[8]), '/')[4]]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "workbookSourceId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[2], split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[8])]"
          },
          "location": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[2], split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('LogAnalyticsWorkspaceResourceID'), '/')[8]), '2022-10-01', 'full').location]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "17596984874577914762"
            }
          },
          "parameters": {
            "workbookDisplayNameIncidentManagement": {
              "type": "string",
              "defaultValue": "Microsoft DLP Incident Management"
            },
            "workbookDisplayNameActivity": {
              "type": "string",
              "defaultValue": "Microsoft DLP Activity"
            },
            "workbookDisplayNameOrganization": {
              "type": "string",
              "defaultValue": "Microsoft DLP Organizational Context"
            },
            "workbookType": {
              "type": "string",
              "defaultValue": "sentinel"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "workbookSourceId": {
              "type": "string",
              "metadata": {
                "description": "The id of resource instance to which the workbook will be associated"
              }
            },
            "workbookIdIncidentManagement": {
              "type": "string",
              "defaultValue": "[guid(parameters('workbookSourceId'), '2ef8ee66-f6d1-4b01-9cbf-bbc50ade85e3')]"
            },
            "workbookIdActivity": {
              "type": "string",
              "defaultValue": "[guid(parameters('workbookSourceId'), 'ab67f23d-c05b-446f-b313-d263d79c161c')]"
            },
            "workbookIdOrganization": {
              "type": "string",
              "defaultValue": "[guid(parameters('workbookSourceId'), 'c1072053-ae86-4b00-a7e5-6d5c3d2dd2ad')]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Insights/workbooks",
              "apiVersion": "2022-04-01",
              "name": "[parameters('workbookIdIncidentManagement')]",
              "location": "[parameters('location')]",
              "kind": "shared",
              "properties": {
                "displayName": "[parameters('workbookDisplayNameIncidentManagement')]",
                "serializedData": "{\"version\":\"Notebook/1.0\",\"items\":[{\"type\":1,\"content\":{\"json\":\"## Microsoft Purview DLP Incident Management\"},\"name\":\"text - 2\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"264afe85-711d-483d-a208-af021b3fcfc2\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"paramWorkspace\",\"label\":\"Sentinel Workspace\",\"type\":5,\"isRequired\":true,\"query\":\"resources\\r\\n| where type contains \\\"microsoft.operationalinsights/workspaces\\\"\\r\\n| extend id = tolower(id)\\r\\n| summarize by id=tolower(id)\\r\\n| project id\",\"crossComponentResources\":[\"value::all\"],\"typeSettings\":{\"additionalResourceOptions\":[],\"showDefault\":false},\"queryType\":1,\"value\":\"/subscriptions/8a27ecf5-1c40-4eee-a29d-0a7f9a7de45f/resourcegroups/rg-dlp-09191225/providers/microsoft.operationalinsights/workspaces/sentinel09191225\"},{\"id\":\"b8b136a2-f4bf-42c8-babc-902b8ff6cc6d\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"paramTimeRange\",\"label\":\"Incident Modified Time\",\"type\":4,\"isRequired\":true,\"typeSettings\":{\"selectableValues\":[{\"durationMs\":300000},{\"durationMs\":900000},{\"durationMs\":1800000},{\"durationMs\":3600000},{\"durationMs\":14400000},{\"durationMs\":43200000},{\"durationMs\":86400000},{\"durationMs\":172800000},{\"durationMs\":259200000},{\"durationMs\":604800000},{\"durationMs\":1209600000},{\"durationMs\":2419200000},{\"durationMs\":2592000000},{\"durationMs\":5184000000},{\"durationMs\":7776000000}],\"allowCustom\":true},\"value\":{\"durationMs\":7776000000}},{\"id\":\"c10ac340-1c5d-4273-8d4f-04aeb6f7736d\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"paramProduct\",\"label\":\"Product\",\"type\":2,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"SecurityIncident\\r\\n| where TimeGenerated {paramTimeRange} and Status != 'Deleted'\\r\\n| extend Product = tostring(parse_json(tostring(AdditionalData.alertProductNames))[0])\\r\\n| summarize Count=count(IncidentNumber) by Product = case (Product ==\\\"\\\", \\\"Undefined\\\", Product)\\r\\n| project Value = Product, Label = Product, Selected = iff(Product == 'Microsoft Data Loss Prevention (Custom)', true, false) \",\"crossComponentResources\":[\"{paramWorkspace}\"],\"isHiddenWhenLocked\":true,\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"showDefault\":false},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"79d64d60-f4ed-4ed4-ab93-de72d0ee74a5\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"paramStatus\",\"label\":\"Incident Status\",\"type\":2,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"all\",\"showDefault\":false},\"jsonData\":\"[\\r\\n    {\\\"value\\\": \\\"New\\\", \\\"selected\\\": true}, \\r\\n    {\\\"value\\\": \\\"Active\\\", \\\"selected\\\": true},\\r\\n    {\\\"value\\\": \\\"Closed\\\", \\\"selected\\\": false}\\r\\n]\",\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"paramTimeRange\",\"value\":[\"New\",\"Active\"]},{\"id\":\"75803958-4d09-442e-a143-4005d267d0d7\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"paramClassification\",\"label\":\"Incident Classification\",\"type\":2,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"let product = dynamic([{paramProduct}]);\\r\\n\\r\\nSecurityIncident\\r\\n| where TimeGenerated {paramTimeRange} and Status != 'Deleted'\\r\\n| extend Product = todynamic((parse_json(tostring(AdditionalData.alertProductNames))[0]))\\r\\n| where Product in (product) or \\\"*\\\" in (product)\\r\\n| summarize by Classification\\r\\n| where Classification != ''\",\"crossComponentResources\":[\"{paramWorkspace}\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"all\",\"showDefault\":false},\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"paramTimeRange\",\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"17aca97f-01e3-4012-ac2c-8167f6a4353b\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"paramWorkload\",\"label\":\"Workload\",\"type\":2,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"let product = dynamic([{paramProduct}]);\\r\\n\\r\\nSecurityIncident\\r\\n| where TimeGenerated {paramTimeRange} and Status != 'Deleted'\\r\\n| extend Product = todynamic((parse_json(tostring(AdditionalData.alertProductNames))[0]))\\r\\n| where Product in (product) or \\\"*\\\" in (product)\\r\\n| summarize arg_max(TimeGenerated, *) by IncidentNumber\\r\\n| mv-expand AlertIds\\r\\n| extend AlertId = tostring(AlertIds)\\r\\n| join kind=leftouter (SecurityAlert | where TimeGenerated {paramTimeRange} | summarize arg_max(TimeGenerated, *) by SystemAlertId) on $left.AlertId == $right.SystemAlertId\\r\\n| extend Workload = parse_json(tostring(parse_json(ExtendedProperties).[\\\"Custom Details\\\"])).Workload[0]\\r\\n| summarize by tostring(Workload), Label = iff(Workload == 'MicrosoftTeams', 'Microsoft Teams', Workload)\\r\\n| where Workload != ''\",\"crossComponentResources\":[\"{paramWorkspace}\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"all\",\"showDefault\":false},\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"c9768571-fcde-4d64-9a1b-f8339e6f21a7\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"paramMatchCount\",\"label\":\"Match Count GTE\",\"type\":1,\"query\":\"print('0')\",\"typeSettings\":{\"paramValidationRules\":[{\"regExp\":\"/^\\\\d+$/\",\"match\":false,\"message\":\"Please provide a number value.\"}]},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"38428091-9cd9-423f-aa0c-b67f4129e807\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"paramSubscriptionId\",\"type\":1,\"query\":\"let workspaceId = datatable(data:string) ['{paramWorkspace}'];\\r\\n\\r\\nworkspaceId\\r\\n| extend SubscriptionId = split(data, '/')[2]\\r\\n| project SubscriptionId\",\"crossComponentResources\":[\"{paramWorkspace}\"],\"isHiddenWhenLocked\":true,\"queryType\":0,\"resourceType\":\"microsoft.resources/subscriptions\"},{\"id\":\"3a92ac27-d518-486c-b521-0c19b0cc2542\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"paramRgName\",\"type\":1,\"query\":\"let workspaceId = datatable(data:string) ['{paramWorkspace}'];\\r\\n\\r\\nworkspaceId\\r\\n| extend RgName = split(data, '/')[4]\\r\\n| project RgName\",\"crossComponentResources\":[\"{paramWorkspace}\"],\"isHiddenWhenLocked\":true,\"queryType\":0,\"resourceType\":\"microsoft.resources/resourcegroups\"}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parametersMain\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let status = dynamic([{paramStatus}]);\\r\\nlet classification = dynamic([{paramClassification}]);\\r\\nlet workload = dynamic([{paramWorkload}]);\\r\\nlet product = dynamic([{paramProduct}]);\\r\\nlet matchCountTrigger = {paramMatchCount};\\r\\n\\r\\nlet data = SecurityIncident\\r\\n| where TimeGenerated {paramTimeRange}\\r\\n| extend Product = todynamic((parse_json(tostring(AdditionalData.alertProductNames))[0]))\\r\\n| where Product in (product) or \\\"*\\\" in (product)\\r\\n| summarize arg_max(TimeGenerated, *) by IncidentNumber\\r\\n| where Status in (status) or 'all' in (status) \\r\\n| where Classification in (classification) or 'all' in (classification)\\r\\n| summarize arg_max(TimeGenerated, *) by IncidentNumber\\r\\n| mv-expand AlertIds\\r\\n| extend AlertId = tostring(AlertIds)\\r\\n| join kind=leftouter (SecurityAlert | where TimeGenerated {paramTimeRange} | summarize arg_max(TimeGenerated, *) by SystemAlertId\\r\\n    | extend EventId = substring(AlertLink, indexof(AlertLink, 'eventid=') + 8, indexof(AlertLink, '&creationtime') - indexof(AlertLink, 'eventid=') - 8)\\r\\n    | extend Workload = tostring(parse_json(tostring(parse_json(ExtendedProperties).[\\\"Custom Details\\\"])).Workload[0])\\r\\n    | extend User = tostring(parse_json(tostring(parse_json(ExtendedProperties).[\\\"Custom Details\\\"])).User[0])\\r\\n    | extend Actions = tostring(parse_json(tostring(parse_json(ExtendedProperties).[\\\"Custom Details\\\"])).ActionsTaken[0])\\r\\n    | extend MatchCount = tostring(parse_json(tostring(parse_json(ExtendedProperties).[\\\"Custom Details\\\"])).MatchCount[0])\\r\\n    | extend PolicyName = AlertName\\r\\n    | extend AlertStatus = Status) on $left.AlertId == $right.SystemAlertId\\r\\n| extend IncidentNumber = tostring(IncidentNumber)\\r\\n| extend IncidentArmId = strcat('{paramWorkspace}/providers/Microsoft.SecurityInsights/Incidents/', IncidentName)\\r\\n| where Workload in (workload) or 'all' in (workload)\\r\\n| where toint(MatchCount) >= matchCountTrigger\\r\\n| order by TimeGenerated;\\r\\n\\r\\ndata\\r\\n| summarize arg_max(TimeGenerated, *), Count = count() by SystemAlertId\\r\\n| project Type = 'Alert', ID = int(null), Title = AlertName, CreatedTime = StartTime, LastUpdateTime = ProcessingEndTime, IdField = strcat(IncidentNumber, '/', SystemAlertId), Parent = IncidentNumber, Status = AlertStatus, Owner = '', Severity = AlertSeverity, Link = AlertLink, Workload, MatchCount, User, Actions, IncidentArmId\\r\\n| union (data\\r\\n    | summarize Count = count(), MatchCount = tostring(max(toint(MatchCount))), User = tostring(count_distinct(User)), Workload = tostring(count_distinct(Workload)), arg_max(TimeGenerated, *) by IncidentNumber\\r\\n    | project Type = 'Incident', ID = toint(IncidentNumber), Title, CreatedTime, LastUpdateTime = LastModifiedTime, IdField = IncidentNumber, Owner = iff(Owner.assignedTo == '', 'Unassigned', tostring(Owner.assignedTo)), Status, Parent = '', Severity = strcat('(', Count, ') ', Severity), Workload = strcat('(', Workload, ')'), Link = IncidentUrl, User = strcat('(', User, ')'), MatchCount, IncidentArmId)\\r\\n| order by LastUpdateTime\\r\\n\\r\\n\\r\\n\",\"size\":3,\"title\":\"DLP Incidents\",\"timeContextFromParameter\":\"paramTimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{paramWorkspace}\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"ID\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"OpenBlade\",\"bladeOpenContext\":{\"bladeName\":\"IncidentPage.ReactView\",\"extensionName\":\"Microsoft_Azure_Security_Insights\",\"bladeParameters\":[{\"name\":\"incidentArmId\",\"source\":\"column\",\"value\":\"IncidentArmId\"}]}}},{\"columnMatch\":\"IdField\",\"formatter\":5},{\"columnMatch\":\"Parent\",\"formatter\":5},{\"columnMatch\":\"Title\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"OpenBlade\",\"linkIsContextBlade\":true,\"bladeOpenContext\":{\"bladeName\":\"IncidentPage.ReactView\",\"extensionName\":\"Microsoft_Azure_Security_Insights\",\"bladeParameters\":[{\"name\":\"incidentArmId\",\"source\":\"column\",\"value\":\"IncidentArmId\"}]}}},{\"columnMatch\":\"Severity\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"contains\",\"thresholdValue\":\"High\",\"representation\":\"Sev0\",\"text\":\"{0}{1}\"},{\"operator\":\"contains\",\"thresholdValue\":\"Medium\",\"representation\":\"Sev1\",\"text\":\"{0}{1}\"},{\"operator\":\"contains\",\"thresholdValue\":\"Low\",\"representation\":\"Sev2\",\"text\":\"{0}{1}\"},{\"operator\":\"contains\",\"thresholdValue\":\"Informational\",\"representation\":\"Sev3\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"Sev0\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"Link\",\"formatter\":5,\"formatOptions\":{\"linkTarget\":\"Url\",\"linkLabel\":\"Open\"}},{\"columnMatch\":\"IncidentArmId\",\"formatter\":5}],\"rowLimit\":10000,\"hierarchySettings\":{\"idColumn\":\"IdField\",\"parentColumn\":\"Parent\",\"treeType\":0,\"expanderColumn\":\"Severity\"},\"sortBy\":[{\"itemKey\":\"CreatedTime\",\"sortOrder\":2}],\"labelSettings\":[{\"columnId\":\"CreatedTime\",\"label\":\"Created Time\"},{\"columnId\":\"LastUpdateTime\",\"label\":\"Last Update Time\"},{\"columnId\":\"Workload\",\"label\":\"Workloads\"},{\"columnId\":\"MatchCount\",\"label\":\"Match Count\"},{\"columnId\":\"User\",\"label\":\"Users\"}]},\"sortBy\":[{\"itemKey\":\"CreatedTime\",\"sortOrder\":2}]},\"name\":\"queryDlpAlerts\"}],\"isLocked\":false,\"fallbackResourceIds\":[\"/subscriptions/8a27ecf5-1c40-4eee-a29d-0a7f9a7de45f/resourcegroups/rg-dlp-09191225/providers/microsoft.operationalinsights/workspaces/sentinel09191225\"],\"fromTemplateId\":\"sentinel-UserWorkbook\"}",
                "version": "1.0",
                "sourceId": "[parameters('workbookSourceId')]",
                "category": "[parameters('workbookType')]"
              }
            },
            {
              "type": "Microsoft.Insights/workbooks",
              "apiVersion": "2022-04-01",
              "name": "[parameters('workbookIdActivity')]",
              "location": "[parameters('location')]",
              "kind": "shared",
              "properties": {
                "displayName": "[parameters('workbookDisplayNameActivity')]",
                "serializedData": "{\"version\":\"Notebook/1.0\",\"items\":[{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"36a4172e-0e49-4884-b2a2-2281528a2ff4\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"TimeRange\",\"type\":4,\"isRequired\":true,\"value\":{\"durationMs\":7776000000},\"typeSettings\":{\"selectableValues\":[{\"durationMs\":300000},{\"durationMs\":900000},{\"durationMs\":1800000},{\"durationMs\":3600000},{\"durationMs\":14400000},{\"durationMs\":43200000},{\"durationMs\":86400000},{\"durationMs\":172800000},{\"durationMs\":259200000},{\"durationMs\":604800000},{\"durationMs\":1209600000},{\"durationMs\":2419200000},{\"durationMs\":2592000000},{\"durationMs\":5184000000},{\"durationMs\":7776000000}],\"allowCustom\":true},\"label\":\"Time Range\"},{\"id\":\"4e1b6539-9788-43e2-a283-4891f33f1677\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Operations\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"OfficeActivity\\r\\n| where OfficeWorkload in ('SharePoint', 'OneDrive', 'Exchange', 'MicrosoftTeams')\\r\\n| summarize Count = count() by Operation\\r\\n| order by Count desc, Operation asc\\r\\n| project Value = Operation, Label = strcat(Operation, ' - ', Count)\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"All\",\"showDefault\":false},\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"TimeRange\",\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"e2b700d7-d218-47db-9521-52176ed43005\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Users\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"PurviewDLP(dynamic([\\\"SharePoint\\\", \\\"OneDrive\\\", \\\"Exchange\\\", \\\"MicrosoftTeams\\\", \\\"Endpoint\\\"]))\\r\\n| where UserPrincipalName != \\\"\\\"\\r\\n| summarize Count = count() by UserPrincipalName\\r\\n| order by Count desc, UserPrincipalName asc\\r\\n| project Value = UserPrincipalName, Label = strcat(UserPrincipalName, ' - ', Count)\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"All\",\"showDefault\":false},\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"TimeRange\",\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"fee19597-ebc1-4f26-bc82-1284e9111625\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Policy\",\"type\":2,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"PurviewDLP(dynamic([\\\"SharePoint\\\", \\\"OneDrive\\\", \\\"Exchange\\\", \\\"MicrosoftTeams\\\", \\\"Endpoint\\\"]))\\r\\n| where PolicyName != \\\"\\\"\\r\\n| summarize Count = count() by PolicyName\\r\\n| order by Count desc, PolicyName asc\\r\\n| project Value = PolicyName, Label = strcat(PolicyName, ' - ', Count)\\r\\n\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"All\",\"showDefault\":false},\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"TimeRange\",\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parameters - 1\"},{\"type\":1,\"content\":{\"json\":\"## **DLP Workloads**\"},\"name\":\"text - 0\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let data = PurviewDLP(dynamic([\\\"SharePoint\\\", \\\"OneDrive\\\", \\\"Exchange\\\", \\\"MicrosoftTeams\\\", \\\"Endpoint\\\"]))\\r\\n| where \\\"{Users:lable}\\\"==\\\"All\\\" or UserPrincipalName in ({Users})\\r\\n| where \\\"{Policy:label}\\\"==\\\"All\\\" or PolicyName in ({Policy});\\r\\n\\r\\ndata\\r\\n| summarize Count = count() by Workload\\r\\n| join kind = fullouter (datatable(Workload:string)['SharePoint', 'OneDrive']) on Workload\\r\\n| project Workload = iff(Workload == '', Workload1, Workload), Count = iff(Workload == '', 0, Count)\\r\\n| join kind = inner (data\\r\\n    | make-series Trend = count() default = 0 on CreationTime from {TimeRange:start} to {TimeRange:end} step {TimeRange:grain} by Workload)\\r\\n    on Workload\\r\\n| project-away Workload1, CreationTime\\r\\n| union (\\r\\n    data \\r\\n    | summarize Count = count() \\r\\n    | extend jkey = 1\\r\\n    | join kind=inner (data\\r\\n        | make-series Trend = count() default = 0 on CreationTime from {TimeRange:start} to {TimeRange:end} step {TimeRange:grain}\\r\\n        | extend jkey = 1) on jkey\\r\\n    | extend Workload = 'All'\\r\\n)\\r\\n| order by Count desc\\r\\n| take 10\\r\\n\",\"size\":4,\"timeContextFromParameter\":\"TimeRange\",\"exportFieldName\":\"Workload\",\"exportParameterName\":\"SelectedWorkload\",\"exportDefaultValue\":\"All\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"tileSettings\":{\"titleContent\":{\"columnMatch\":\"Workload\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"Count\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}},\"secondaryContent\":{\"columnMatch\":\"Trend\",\"formatter\":9,\"formatOptions\":{\"min\":0,\"palette\":\"coldHot\"}},\"showBorder\":false}},\"customWidth\":\"50\",\"name\":\"query - 10\"},{\"type\":1,\"content\":{\"json\":\"## DLP Policy Overview\"},\"name\":\"text - 11\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let data = PurviewDLP(dynamic([\\\"SharePoint\\\", \\\"OneDrive\\\", \\\"Exchange\\\", \\\"MicrosoftTeams\\\", \\\"Endpoint\\\"]))\\r\\n| extend Policy = PolicyName\\r\\n| extend UserId = UserPrincipalName\\r\\n| where Policy != \\\"\\\"\\r\\n| where \\\"{Policy:lable}\\\"==\\\"All\\\" or Policy in ({Policy})\\r\\n| where \\\"{Users:lable}\\\"==\\\"All\\\" or UserId in ({Users})\\r\\n| where \\\"{SelectedWorkload}\\\"==\\\"All\\\" or Workload==\\\"{SelectedWorkload}\\\";\\r\\n\\r\\nlet appData = data\\r\\n| summarize TotalCount = count() by Policy\\r\\n| join kind=inner (data\\r\\n    | make-series Trend = count() default = 0 on TimeGenerated in range({TimeRange:start}, {TimeRange:end}, {TimeRange:grain}) by Policy\\r\\n    | project-away TimeGenerated) on Policy\\r\\n| order by TotalCount desc, Policy asc\\r\\n| project Policy, TotalCount, Trend\\r\\n| serialize Id = row_number();\\r\\ndata\\r\\n| summarize TotalCount = count() by UserId , Policy\\r\\n| join kind=inner (data\\r\\n    | make-series Trend = count() default = 0 on TimeGenerated in range({TimeRange:start}, {TimeRange:end}, {TimeRange:grain}) by Policy, UserId\\r\\n    | project-away TimeGenerated) on Policy, UserId\\r\\n| order by TotalCount desc, Policy asc\\r\\n| project Policy, UserId, TotalCount, Trend\\r\\n| serialize Id = row_number(1000000)\\r\\n| join kind=inner (appData) on Policy\\r\\n| project Id, Name = UserId, Type = 'UserId', ['policy Count'] = TotalCount, Trend,  ParentId = Id1\\r\\n| union (appData \\r\\n    | project Id, Name = Policy, Type = 'Policy', ['policy Count'] = TotalCount,  Trend)\\r\\n| order by ['policy Count'] desc, Name asc\",\"size\":1,\"timeContextFromParameter\":\"TimeRange\",\"exportParameterName\":\"OperationDetail\",\"exportDefaultValue\":\"{ \\\"Name\\\":\\\"\\\", \\\"Type\\\":\\\"*\\\"}\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Id\",\"formatter\":5},{\"columnMatch\":\"Trend\",\"formatter\":9,\"formatOptions\":{\"min\":0,\"palette\":\"gray\"}},{\"columnMatch\":\"ParentId\",\"formatter\":5},{\"columnMatch\":\"Operations Count\",\"formatter\":8,\"formatOptions\":{\"min\":0,\"palette\":\"orange\"}}],\"filter\":true,\"hierarchySettings\":{\"idColumn\":\"Id\",\"parentColumn\":\"ParentId\",\"treeType\":0,\"expanderColumn\":\"Name\"},\"labelSettings\":[{\"columnId\":\"policy Count\",\"label\":\"Policy Count\"}]}},\"name\":\"query - 3\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let details = dynamic({OperationDetail});\\r\\n\\r\\nPurviewDLP(dynamic([\\\"SharePoint\\\", \\\"OneDrive\\\", \\\"Exchange\\\", \\\"MicrosoftTeams\\\", \\\"Endpoint\\\"]))\\r\\n| extend Policy = PolicyName\\r\\n| extend UserId = UserPrincipalName\\r\\n| where \\\"{Policy:lable}\\\"==\\\"All\\\" or Policy in ({Policy})\\r\\n| where \\\"{Users:lable}\\\"==\\\"All\\\" or UserId in ({Users})\\r\\n| where \\\"{SelectedWorkload}\\\"==\\\"All\\\" or Workload==\\\"{SelectedWorkload}\\\"\\r\\n| where details.Type == '*' or (details.Type == 'Policy' and Policy == details.Name) or (details.Type == 'UserId' and UserId == details.Name)\\r\\n| summarize Amount = count() by Policy, bin_at(TimeGenerated, 1d, now()) \\r\\n| sort by Amount \",\"size\":1,\"showAnalytics\":true,\"title\":\"Policy Hits over time\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"linechart\"},\"name\":\"query - 2\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let details = dynamic({OperationDetail});\\r\\n\\r\\nPurviewDLP(dynamic([\\\"SharePoint\\\", \\\"OneDrive\\\", \\\"Exchange\\\", \\\"MicrosoftTeams\\\", \\\"Endpoint\\\"]))\\r\\n| extend Rule = RuleName\\r\\n| extend UserId = UserPrincipalName\\r\\n| extend Policy = PolicyName\\r\\n| where \\\"{Policy:lable}\\\"==\\\"All\\\" or Policy in ({Policy})\\r\\n| where \\\"{Users:lable}\\\"==\\\"All\\\" or UserId in ({Users})\\r\\n| where \\\"{SelectedWorkload}\\\"==\\\"All\\\" or Workload==\\\"{SelectedWorkload}\\\"\\r\\n| where details.Type == '*' or (details.Type == 'Rule' and Rule == details.Name) or (details.Type == 'UserId' and UserId == details.Name)\\r\\n| summarize Number = count() by Rule, UserId, Policy, TimeGenerated\",\"size\":0,\"showAnalytics\":true,\"title\":\"DLP Rules\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\"},\"customWidth\":\"50\",\"name\":\"query - 4\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let details = dynamic({OperationDetail});\\r\\nPurviewDLP(dynamic([\\\"SharePoint\\\", \\\"OneDrive\\\", \\\"Exchange\\\", \\\"MicrosoftTeams\\\", \\\"Endpoint\\\"]))\\r\\n| extend exception = ExceptionReason\\r\\n| extend Rule = RuleName\\r\\n| extend UserId = UserPrincipalName\\r\\n| extend Policy = PolicyName\\r\\n| where exception != \\\"\\\"\\r\\n| where \\\"{Policy:lable}\\\"==\\\"All\\\" or Policy in ({Policy})\\r\\n| where \\\"{Users:lable}\\\"==\\\"All\\\" or UserId in ({Users})\\r\\n| where \\\"{SelectedWorkload}\\\"==\\\"All\\\" or Workload==\\\"{SelectedWorkload}\\\"\\r\\n| where details.Type == '*' or (details.Type == 'Rule' and Rule == details.Name) or (details.Type == 'UserId' and UserId == details.Name)\\r\\n| summarize Number = count() by Rule\",\"size\":0,\"showAnalytics\":true,\"title\":\"Requested exceptions per rule\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\"},\"customWidth\":\"50\",\"name\":\"query - 5\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let details = dynamic({OperationDetail});\\r\\nPurviewDLP(dynamic([\\\"SharePoint\\\", \\\"OneDrive\\\", \\\"Exchange\\\", \\\"MicrosoftTeams\\\", \\\"Endpoint\\\"]), true)\\r\\n| extend severity = RuleSeverity\\r\\n| extend File = iff(Workload in (\\\"SharePoint\\\", \\\"OneDrive\\\", \\\"Endpoint\\\"), Filename, EmailSubject)\\r\\n| extend UserId = UserPrincipalName\\r\\n| extend Policy = PolicyName\\r\\n| where \\\"{Policy:lable}\\\"==\\\"All\\\" or Policy in ({Policy})\\r\\n| where \\\"{Users:lable}\\\"==\\\"All\\\" or UserId in ({Users})\\r\\n| where \\\"{SelectedWorkload}\\\"==\\\"All\\\" or Workload==\\\"{SelectedWorkload}\\\"\\r\\n| where Policy != '' \\r\\n| where details.Type == '*' or (details.Type == 'Policy' and Policy == details.Name) or (details.Type == 'UserId' and UserId == details.Name)\\r\\n| summarize Number = count() by File, Workload, severity, UserId, Policy, bin(TimeGenerated, 1d)\\r\\n| order by Number, TimeGenerated\",\"size\":1,\"title\":\"File/Message Details\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"filter\":true,\"sortBy\":[{\"itemKey\":\"UserId\",\"sortOrder\":2}],\"labelSettings\":[{\"columnId\":\"File\",\"label\":\"File/Subject\"},{\"columnId\":\"severity\",\"label\":\"Severity\"},{\"columnId\":\"UserId\",\"label\":\"User\"},{\"columnId\":\"TimeGenerated\",\"label\":\"Time Generated\"},{\"columnId\":\"Number\",\"label\":\"Count\"}]},\"sortBy\":[{\"itemKey\":\"UserId\",\"sortOrder\":2}]},\"customWidth\":\"50\",\"name\":\"query - 6\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let details = dynamic({OperationDetail});\\r\\nPurviewDLP(dynamic([\\\"SharePoint\\\", \\\"OneDrive\\\", \\\"Exchange\\\", \\\"MicrosoftTeams\\\", \\\"Endpoint\\\"]), true)\\r\\n| extend severity = RuleSeverity\\r\\n| extend exception = ExceptionReason\\r\\n| extend Rule = RuleName\\r\\n| extend UserId = UserPrincipalName\\r\\n| extend Policy = PolicyName\\r\\n| where exception != \\\"\\\"\\r\\n| where \\\"{Policy:lable}\\\"==\\\"All\\\" or Policy in ({Policy})\\r\\n| where \\\"{Users:lable}\\\"==\\\"All\\\" or UserId in ({Users})\\r\\n| where \\\"{SelectedWorkload}\\\"==\\\"All\\\" or Workload==\\\"{SelectedWorkload}\\\"\\r\\n| where details.Type == '*' or (details.Type == 'Policy' and Policy == details.Name) or (details.Type == 'UserId' and UserId == details.Name)\\r\\n| summarize Number = count() by Rule, Workload, severity, exception, ExceptionJustification, UserId, Policy, bin(TimeGenerated, 1d)\\r\\n| order by Number, TimeGenerated\",\"size\":1,\"title\":\"DLP Exception Information\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"filter\":true,\"labelSettings\":[{\"columnId\":\"severity\",\"label\":\"Severity\"},{\"columnId\":\"exception\",\"label\":\"Exception\"},{\"columnId\":\"ExceptionJustification\",\"label\":\"Justification\"},{\"columnId\":\"TimeGenerated\",\"label\":\"Time Generated\"},{\"columnId\":\"Number\",\"label\":\"Count\"}]},\"sortBy\":[]},\"customWidth\":\"50\",\"name\":\"query - 7\"},{\"type\":1,\"content\":{\"json\":\"## Workload Operations\"},\"name\":\"text - 12\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let data = OfficeActivity\\r\\n| where \\\"{Operations:lable}\\\"==\\\"All\\\" or Operation in ({Operations})\\r\\n| where \\\"{Users:lable}\\\"==\\\"All\\\" or UserId in ({Users})\\r\\n| where OfficeWorkload in ('SharePoint', 'OneDrive', 'Exchange', 'MicrosoftTeams') and (\\\"{SelectedWorkload}\\\"==\\\"All\\\" or OfficeWorkload==\\\"{SelectedWorkload}\\\");\\r\\nlet appData = data\\r\\n| summarize TotalCount = count() by Operation, OfficeWorkload\\r\\n| join kind=inner (data\\r\\n    | make-series Trend = count() default = 0 on TimeGenerated in range({TimeRange:start}, {TimeRange:end}, {TimeRange:grain}) by Operation\\r\\n    | project-away TimeGenerated) on Operation\\r\\n| order by TotalCount desc, Operation asc\\r\\n| project Operation, OfficeWorkload, TotalCount, Trend\\r\\n| serialize Id = row_number();\\r\\ndata\\r\\n| summarize TotalCount = count() by SourceFileExtension, OfficeWorkload, Operation\\r\\n| join kind=inner (data\\r\\n    | make-series Trend = count() default = 0 on TimeGenerated in range({TimeRange:start}, {TimeRange:end}, {TimeRange:grain}) by Operation, OfficeWorkload, SourceFileExtension\\r\\n    | project-away TimeGenerated) on Operation, SourceFileExtension\\r\\n| order by TotalCount desc, Operation asc\\r\\n| project Operation, OfficeWorkload, SourceFileExtension, TotalCount, Trend\\r\\n| serialize Id = row_number(1000000)\\r\\n| join kind=inner (appData) on Operation\\r\\n| project Id, Name = iff(OfficeWorkload in ('SharePoint', 'OneDrive'), SourceFileExtension, 'Message'), OfficeWorkload, Type = 'Source Type', ['Operations Count'] = TotalCount, Trend,  ParentId = Id1\\r\\n| union (appData \\r\\n    | project Id, Name = strcat(Operation, ' (', OfficeWorkload, ')'), Type = 'Operation', ['Operations Count'] = TotalCount,  Trend)\\r\\n| order by ['Operations Count'] desc, Name asc\",\"size\":0,\"title\":\"FIle operations\",\"timeContextFromParameter\":\"TimeRange\",\"exportParameterName\":\"FileOperations\",\"exportDefaultValue\":\"{ \\\"Name\\\":\\\"\\\", \\\"Type\\\":\\\"*\\\"}\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Id\",\"formatter\":5},{\"columnMatch\":\"OfficeWorkload\",\"formatter\":5},{\"columnMatch\":\"Operations Count\",\"formatter\":8,\"formatOptions\":{\"min\":0,\"palette\":\"blue\"}},{\"columnMatch\":\"Trend\",\"formatter\":10,\"formatOptions\":{\"min\":0,\"palette\":\"greenDark\"}},{\"columnMatch\":\"ParentId\",\"formatter\":5}],\"filter\":true,\"hierarchySettings\":{\"idColumn\":\"Id\",\"parentColumn\":\"ParentId\",\"treeType\":0,\"expanderColumn\":\"Name\"},\"sortBy\":[{\"itemKey\":\"Name\",\"sortOrder\":1}]},\"sortBy\":[{\"itemKey\":\"Name\",\"sortOrder\":1}]},\"name\":\"query - 8\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let details = dynamic({OperationDetail});\\r\\n\\r\\nlet data = PurviewDLP(dynamic([\\\"SharePoint\\\", \\\"OneDrive\\\", \\\"Exchange\\\", \\\"MicrosoftTeams\\\", \\\"Endpoint\\\"]), true)\\r\\n| extend Severity = RuleSeverity\\r\\n| extend UserId = UserPrincipalName\\r\\n| extend Policy = PolicyName\\r\\n| extend Filename = iff(Workload in (\\\"SharePoint\\\", \\\"OneDrive\\\", \\\"Endpoint\\\"), Filename, EmailSubject)\\r\\n| where \\\"{Policy:lable}\\\"==\\\"All\\\" or Policy in ({Policy})\\r\\n| where \\\"{Users:lable}\\\"==\\\"All\\\" or UserId in ({Users})\\r\\n| where \\\"{SelectedWorkload}\\\"==\\\"All\\\" or Workload==\\\"{SelectedWorkload}\\\"\\r\\n| where details.Type == '*' or (details.Type == 'Policy' and Policy == details.Name) or (details.Type == 'UserId' and UserId == details.Name)\\r\\n| summarize Calls = count() by App = UserId , Request = Filename, Dependency = PolicyName\\r\\n| extend RequestId = strcat(App, '::', Request);\\r\\nlet links = data\\r\\n| summarize Calls = sum(Calls) by App, RequestId\\r\\n| project SourceId = App, TargetId = RequestId, Calls, Kind = 'App -> Request'\\r\\n| union (data\\r\\n    | project SourceId = RequestId, TargetId = Dependency, Calls, Kind = 'Request -> Dependency');\\r\\nlet nodes = data\\r\\n| summarize Calls = sum(Calls) by App\\r\\n| project Id = App, Name = App, Calls, Kind = 'App'\\r\\n| union (data\\r\\n    | summarize Calls = sum(Calls) by RequestId, Request\\r\\n    | project Id = RequestId, Name = Request, Calls, Kind = 'Request')\\r\\n| union (data\\r\\n    | summarize Calls = sum(Calls) by Dependency\\r\\n    | project Id = Dependency, Name = Dependency, Calls, Kind = 'Dependency');\\r\\nnodes\\r\\n| union (links)\",\"size\":3,\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"graph\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"SourceFileName\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"GenericDetails\",\"linkIsContextBlade\":true,\"showIcon\":true}},{\"columnMatch\":\"DestinationFileName\",\"formatter\":5,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"DestinationFileExtension\",\"formatter\":5,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"Number\",\"formatter\":8,\"formatOptions\":{\"palette\":\"lightBlue\",\"showIcon\":true}}]},\"graphSettings\":{\"type\":0,\"topContent\":{\"columnMatch\":\"Name\",\"formatter\":12},\"centerContent\":{\"columnMatch\":\"Number\",\"formatter\":1,\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}},\"nodeIdField\":\"Id\",\"sourceIdField\":\"SourceId\",\"targetIdField\":\"TargetId\",\"graphOrientation\":3,\"showOrientationToggles\":false,\"edgeSize\":\"Calls\",\"nodeSize\":null,\"staticNodeSize\":100,\"colorSettings\":{\"nodeColorField\":\"Kind\",\"type\":1,\"colorPalette\":\"cool\"},\"hivesMargin\":5},\"mapSettings\":{\"locInfo\":\"AzureResource\",\"sizeSettings\":\"Number\",\"sizeAggregation\":\"Sum\",\"legendMetric\":\"Number\",\"legendAggregation\":\"Sum\",\"itemColorSettings\":{\"type\":\"heatmap\",\"colorAggregation\":\"Sum\",\"nodeColorField\":\"Number\",\"heatmapPalette\":\"greenRed\"}}},\"name\":\"query - 9\"}],\"isLocked\":false,\"fallbackResourceIds\":[\"/subscriptions/46db4fa1-a60c-4cbd-be28-807c0c4ea04f/resourcegroups/rg-dlp-06082215/providers/microsoft.operationalinsights/workspaces/sentintel06082215\"],\"fromTemplateId\":\"sentinel-UserWorkbook\"}",
                "version": "1.0",
                "sourceId": "[parameters('workbookSourceId')]",
                "category": "[parameters('workbookType')]"
              }
            },
            {
              "type": "Microsoft.Insights/workbooks",
              "apiVersion": "2022-04-01",
              "name": "[parameters('workbookIdOrganization')]",
              "location": "[parameters('location')]",
              "kind": "shared",
              "properties": {
                "displayName": "[parameters('workbookDisplayNameOrganization')]",
                "serializedData": "{\"version\":\"Notebook/1.0\",\"items\":[{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"36a4172e-0e49-4884-b2a2-2281528a2ff4\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"TimeRange\",\"type\":4,\"isRequired\":true,\"value\":{\"durationMs\":7776000000},\"typeSettings\":{\"selectableValues\":[{\"durationMs\":300000},{\"durationMs\":900000},{\"durationMs\":1800000},{\"durationMs\":3600000},{\"durationMs\":14400000},{\"durationMs\":43200000},{\"durationMs\":86400000},{\"durationMs\":172800000},{\"durationMs\":259200000},{\"durationMs\":604800000},{\"durationMs\":1209600000},{\"durationMs\":2419200000},{\"durationMs\":2592000000},{\"durationMs\":5184000000},{\"durationMs\":7776000000}],\"allowCustom\":true},\"label\":\"Time Range\"},{\"id\":\"4e1b6539-9788-43e2-a283-4891f33f1677\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Workloads\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"PurviewDLP\\r\\n| summarize Count = count() by Workload\\r\\n| order by Count desc, Workload asc\\r\\n| project Value = Workload, Label = strcat(Workload, ' - ', Count)\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"All\",\"showDefault\":false},\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"TimeRange\",\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"e2b700d7-d218-47db-9521-52176ed43005\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Users\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"PurviewDLP\\r\\n| extend User = UserPrincipalName\\r\\n| summarize Count = count() by User\\r\\n| order by Count desc, User asc\\r\\n| project Value = User, Label = strcat(User, ' - ', Count)\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"All\",\"showDefault\":false},\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"TimeRange\",\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"fee19597-ebc1-4f26-bc82-1284e9111625\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Policy\",\"type\":2,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"PurviewDLP\\r\\n| extend policy = PolicyName\\r\\n| where policy != \\\"\\\"\\r\\n| summarize Count = count() by policy\\r\\n| order by Count desc, policy asc\\r\\n| project Value = policy, Label = strcat(policy, ' - ', Count)\\r\\n\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"All\",\"showDefault\":false},\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"TimeRange\",\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"369486e7-72aa-4594-ac79-b0aeb63763d8\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Department\",\"type\":2,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"PurviewDLP\\r\\n| where department != \\\"\\\"\\r\\n| summarize Count = count() by department\\r\\n| order by Count desc, department asc\\r\\n| project Value = department, Label = strcat(department, ' - ', Count)\\r\\n\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"All\",\"showDefault\":false},\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"TimeRange\",\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"fcf37b5e-d51d-46e8-b782-4b8b3c661188\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Location\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"PurviewDLP\\r\\n| where usageLocation != \\\"\\\"\\r\\n| summarize Count = count() by usageLocation\\r\\n| order by Count desc, usageLocation asc\\r\\n| project Value = usageLocation, Label = strcat(usageLocation, ' - ', Count)\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"All\",\"showDefault\":false},\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"TimeRange\",\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parameters - 1\"},{\"type\":1,\"content\":{\"json\":\"## **Departments**\"},\"name\":\"text - 0\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let data = PurviewDLP\\r\\n| extend department = iff(isempty(department), \\\"External\\\", department)\\r\\n| where \\\"{Users:Label}\\\"==\\\"All\\\" or UserPrincipalName in ({Users})\\r\\n| where \\\"{Location:Label}\\\"==\\\"All\\\" or usageLocation in ({Location})\\r\\n| where \\\"{Location:Policy}\\\"==\\\"All\\\" or PolicyName in ({Policy})\\r\\n| where \\\"{Department:Label}\\\"==\\\"All\\\" or department in ({Department});\\r\\n\\r\\ndata\\r\\n| summarize Count = count() by department\\r\\n| join kind = fullouter (datatable(department:string)['Sales & Marketing', 'Legal']) on department\\r\\n| project department = iff(department == '', department1, department), Count = iff(department == '', 0, Count)\\r\\n| join kind = inner (data\\r\\n    | make-series Trend = count() default = 0 on CreationTime from {TimeRange:start} to {TimeRange:end} step {TimeRange:grain} by department)\\r\\n    on department\\r\\n| project-away department1, CreationTime\\r\\n| extend department = department\\r\\n| union (\\r\\n    data \\r\\n    | summarize Count = count() \\r\\n    | extend jkey = 1\\r\\n    | join kind=inner (data\\r\\n        | make-series Trend = count() default = 0 on CreationTime from {TimeRange:start} to {TimeRange:end} step {TimeRange:grain}\\r\\n        | extend jkey = 1) on jkey\\r\\n            | extend department = 'All'   \\r\\n)\\r\\n\",\"size\":4,\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"tileSettings\":{\"titleContent\":{\"columnMatch\":\"department\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"Count\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}},\"secondaryContent\":{\"columnMatch\":\"Trend\",\"formatter\":9,\"formatOptions\":{\"min\":0,\"palette\":\"coldHot\"}},\"showBorder\":false}},\"customWidth\":\"100\",\"name\":\"query - 10\"},{\"type\":1,\"content\":{\"json\":\"## DLP Policy Overview\"},\"name\":\"text - 11\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let data = PurviewDLP\\r\\n| extend Department = department\\r\\n| extend manager = tolower(manager)\\r\\n| extend UserId = UserPrincipalName\\r\\n| extend policy = PolicyName\\r\\n| where Department != \\\"\\\"\\r\\n| where \\\"{Users:Label}\\\"==\\\"All\\\" or UserId in ({Users})\\r\\n| where \\\"{Location:Label}\\\"==\\\"All\\\" or usageLocation in ({Location})\\r\\n| where \\\"{Department:Label}\\\"==\\\"All\\\" or department in ({Department});\\r\\nlet appData = data\\r\\n| summarize TotalCount = count() by Department\\r\\n| join kind=inner (data\\r\\n    | make-series Trend = count() default = 0 on TimeGenerated in range({TimeRange:start}, {TimeRange:end}, {TimeRange:grain}) by Department\\r\\n    | project-away TimeGenerated) on Department\\r\\n| order by TotalCount desc, Department asc\\r\\n| project Department, TotalCount, Trend\\r\\n| serialize Id = row_number();\\r\\ndata\\r\\n| summarize TotalCount = count() by UserId , Department, manager, usageLocation,policy\\r\\n| join kind=inner (data\\r\\n    | make-series Trend = count() default = 0 on TimeGenerated in range({TimeRange:start}, {TimeRange:end}, {TimeRange:grain}) by Department, UserId,manager,policy\\r\\n    | project-away TimeGenerated) on Department, UserId,manager,policy\\r\\n| order by TotalCount desc, Department asc\\r\\n| serialize Id = row_number(1000000)\\r\\n| join kind=inner (appData) on Department\\r\\n| project Id, Name = UserId, Type = 'UserId', ['Department Count'] = TotalCount, Trend,  ParentId = Id1, Manager = manager, Policy = policy\\r\\n| union (appData \\r\\n    | project Id, Name = Department, Type = 'Department', ['Department Count'] = TotalCount,  Trend)\\r\\n| order by ['Department Count'] desc, Name asc\",\"size\":2,\"showAnalytics\":true,\"timeContextFromParameter\":\"TimeRange\",\"exportParameterName\":\"OperationDetail\",\"exportDefaultValue\":\"{ \\\"Name\\\":\\\"\\\", \\\"Type\\\":\\\"*\\\"}\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Id\",\"formatter\":5,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"Operations Count\",\"formatter\":8,\"formatOptions\":{\"min\":0,\"palette\":\"orange\",\"showIcon\":true}},{\"columnMatch\":\"Trend\",\"formatter\":9,\"formatOptions\":{\"min\":0,\"palette\":\"gray\",\"showIcon\":true}},{\"columnMatch\":\"ParentId\",\"formatter\":5,\"formatOptions\":{\"showIcon\":true}}],\"filter\":true,\"hierarchySettings\":{\"idColumn\":\"Id\",\"parentColumn\":\"ParentId\",\"treeType\":0,\"expanderColumn\":\"Name\"}}},\"name\":\"query - 3\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let details = dynamic({OperationDetail});\\r\\n\\r\\nPurviewDLP\\r\\n| extend Department = department\\r\\n| extend UserId = UserPrincipalName\\r\\n| where \\\"{Department:Label}\\\"==\\\"All\\\" or Department in ({Department})\\r\\n| where \\\"{Users:Label}\\\"==\\\"All\\\" or UserId in ({Users})\\r\\n| where \\\"{Location:Label}\\\"==\\\"All\\\" or usageLocation in ({Location})\\r\\n| where details.Type == '*' or (details.Type == 'Department' and Department == details.Name) or (details.Type == 'UserId' and UserId == details.Name)\\r\\n| summarize Amount = count() by Department, bin_at(TimeGenerated, 1d, now()) \\r\\n| sort by Amount \",\"size\":1,\"showAnalytics\":true,\"title\":\"Policy Hits over time\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"linechart\"},\"name\":\"query - 2\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let details = dynamic({OperationDetail});\\r\\n\\r\\nPurviewDLP\\r\\n| extend Rule = RuleName\\r\\n| extend UserId = UserPrincipalName\\r\\n| extend Policy = PolicyName\\r\\n| extend Department = department\\r\\n| where \\\"{Department:Label}\\\"==\\\"All\\\" or Department in ({Department})\\r\\n| where \\\"{Users:Label}\\\"==\\\"All\\\" or UserId in ({Users})\\r\\n| where \\\"{Location:Label}\\\"==\\\"All\\\" or usageLocation in ({Location})\\r\\n| where details.Type == '*' or (details.Type == 'Department' and Department == details.Name) or (details.Type == 'UserId' and UserId == details.Name)\\r\\n| summarize Number = count() by Rule, UserId, Policy, TimeGenerated\",\"size\":0,\"showAnalytics\":true,\"title\":\"DLP Rules\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\"},\"customWidth\":\"50\",\"name\":\"query - 4\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let details = dynamic({OperationDetail});\\r\\n\\r\\nPurviewDLP\\r\\n| extend exception = ExceptionReason\\r\\n| extend Rule = RuleName\\r\\n| extend UserId = UserPrincipalName\\r\\n| extend Policy = PolicyName\\r\\n| extend Department = department\\r\\n| where \\\"{Department:Label}\\\"==\\\"All\\\" or Department in ({Department})\\r\\n| where \\\"{Location:Label}\\\"==\\\"All\\\" or usageLocation in ({Location})\\r\\n| where exception != \\\"\\\"\\r\\n| where \\\"{Policy:Label}\\\"==\\\"All\\\" or Policy in ({Policy})\\r\\n| where \\\"{Users:Label}\\\"==\\\"All\\\" or UserId in ({Users})\\r\\n| where details.Type == '*' or (details.Type == 'Department' and Department == details.Name) or (details.Type == 'UserId' and UserId == details.Name)\\r\\n| summarize Number = count() by Rule\",\"size\":0,\"showAnalytics\":true,\"title\":\"Requested exceptions per rule\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\"},\"customWidth\":\"50\",\"name\":\"query - 5\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let details = dynamic({OperationDetail});\\r\\n\\r\\nPurviewDLP(dynamic([\\\"SharePoint\\\", \\\"OneDrive\\\", \\\"Endpoint\\\", \\\"Exchange\\\", \\\"MicrosoftTeams\\\"]), true) \\r\\n| extend severity = RuleSeverity\\r\\n| extend File = iff(Workload in (\\\"SharePoint\\\", \\\"OneDrive\\\", \\\"Endpoint\\\"), Filename, EmailSubject)\\r\\n| extend UserId = UserPrincipalName\\r\\n| extend Policy = PolicyName\\r\\n| where \\\"{Policy:Label}\\\"==\\\"All\\\" or Policy in ({Policy})\\r\\n| where \\\"{Users:Label}\\\"==\\\"All\\\" or UserId in ({Users})\\r\\n| where \\\"{Location:Label}\\\"==\\\"All\\\" or usageLocation in ({Location})\\r\\n| where Policy != '' \\r\\n| where details.Type == '*' or (details.Type == 'Policy' and Policy == details.Name) or (details.Type == 'UserId' and UserId == details.Name)\\r\\n| summarize Number = count() by File, severity, UserId, Policy, bin(TimeGenerated, 1d)\\r\\n| order by Number, TimeGenerated\",\"size\":1,\"title\":\"Sites details\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"filter\":true,\"sortBy\":[{\"itemKey\":\"UserId\",\"sortOrder\":2}],\"labelSettings\":[{\"columnId\":\"File\",\"label\":\"File/Subject\"}]},\"sortBy\":[{\"itemKey\":\"UserId\",\"sortOrder\":2}]},\"customWidth\":\"50\",\"name\":\"query - 6\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let details = dynamic({OperationDetail});\\r\\nPurviewDLP(dynamic([\\\"SharePoint\\\", \\\"OneDrive\\\", \\\"Endpoint\\\", \\\"Exchange\\\", \\\"MicrosoftTeams\\\"]), true) \\r\\n| extend severity = RuleSeverity\\r\\n| extend exception = ExceptionReason\\r\\n| extend Rule = RuleName\\r\\n| extend UserId = UserPrincipalName\\r\\n| extend Policy = PolicyName\\r\\n| extend Department = department\\r\\n| where exception != \\\"\\\"\\r\\n| where \\\"{Department:Label}\\\"==\\\"All\\\" or Department in ({Department})\\r\\n| where \\\"{Users:Label}\\\"==\\\"All\\\" or UserId in ({Users})\\r\\n| where \\\"{Location:Label}\\\"==\\\"All\\\" or usageLocation in ({Location})\\r\\n| where details.Type == '*' or (details.Type == 'Department' and Department == details.Name) or (details.Type == 'UserId' and UserId == details.Name)\\r\\n| summarize Number = count() by Rule , severity, ExceptionJustification, exception, UserId, Policy, bin(TimeGenerated, 1d)\\r\\n| order by Number, TimeGenerated\",\"size\":1,\"title\":\"DLP Exception Information\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"filter\":true},\"sortBy\":[]},\"customWidth\":\"50\",\"name\":\"query - 7\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let details = dynamic({OperationDetail});\\r\\n\\r\\nlet data = PurviewDLP(dynamic([\\\"SharePoint\\\", \\\"OneDrive\\\", \\\"Endpoint\\\", \\\"Exchange\\\", \\\"MicrosoftTeams\\\"]), true) \\r\\n| extend Severity = RuleSeverity\\r\\n| extend UserId = UserPrincipalName\\r\\n| extend Policy = PolicyName\\r\\n| extend Department = department\\r\\n| where Department != \\\"\\\"\\r\\n| where \\\"{Department:Label}\\\"==\\\"All\\\" or Department in ({Department})\\r\\n| where \\\"{Location:Label}\\\"==\\\"All\\\" or usageLocation in ({Location})\\r\\n| where \\\"{Policy:Label}\\\"==\\\"All\\\" or Policy in ({Policy})\\r\\n| where \\\"{Users:Label}\\\"==\\\"All\\\" or UserId in ({Users})\\r\\n| where details.Type == '*' or (details.Type == 'Policy' and Policy == details.Name) or (details.Type == 'UserId' and UserId == details.Name)\\r\\n| summarize Calls = count() by App = UserId , Request = Department, Dependency = PolicyName\\r\\n| extend RequestId = strcat(App, '::', Request);\\r\\nlet links = data\\r\\n| summarize Calls = sum(Calls) by App, RequestId\\r\\n| project SourceId = App, TargetId = RequestId, Calls, Kind = 'App -> Request'\\r\\n| union (data\\r\\n    | project SourceId = RequestId, TargetId = Dependency, Calls, Kind = 'Request -> Dependency');\\r\\nlet nodes = data\\r\\n| summarize Calls = sum(Calls) by App\\r\\n| project Id = App, Name = App, Calls, Kind = 'App'\\r\\n| union (data\\r\\n    | summarize Calls = sum(Calls) by RequestId, Request\\r\\n    | project Id = RequestId, Name = Request, Calls, Kind = 'Request')\\r\\n| union (data\\r\\n    | summarize Calls = sum(Calls) by Dependency\\r\\n    | project Id = Dependency, Name = Dependency, Calls, Kind = 'Dependency');\\r\\nnodes\\r\\n| union (links)\",\"size\":2,\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"graph\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"SourceFileName\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"GenericDetails\",\"linkIsContextBlade\":true,\"showIcon\":true}},{\"columnMatch\":\"DestinationFileName\",\"formatter\":5,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"DestinationFileExtension\",\"formatter\":5,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"Number\",\"formatter\":8,\"formatOptions\":{\"palette\":\"lightBlue\",\"showIcon\":true}}]},\"graphSettings\":{\"type\":0,\"topContent\":{\"columnMatch\":\"Name\",\"formatter\":12,\"formatOptions\":{\"palette\":\"blue\"}},\"centerContent\":{\"columnMatch\":\"Calls\",\"formatter\":1,\"numberFormat\":{\"unit\":17,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2,\"maximumSignificantDigits\":3}}},\"nodeIdField\":\"Id\",\"sourceIdField\":\"SourceId\",\"targetIdField\":\"TargetId\",\"graphOrientation\":3,\"showOrientationToggles\":false,\"edgeSize\":\"Calls\",\"nodeSize\":null,\"staticNodeSize\":100,\"colorSettings\":{\"nodeColorField\":\"Name\",\"type\":1,\"colorPalette\":\"cool\"},\"hivesMargin\":5},\"mapSettings\":{\"locInfo\":\"AzureResource\",\"sizeSettings\":\"Number\",\"sizeAggregation\":\"Sum\",\"legendMetric\":\"Number\",\"legendAggregation\":\"Sum\",\"itemColorSettings\":{\"type\":\"heatmap\",\"colorAggregation\":\"Sum\",\"nodeColorField\":\"Number\",\"heatmapPalette\":\"greenRed\"}}},\"name\":\"query - 9\"}],\"isLocked\":false,\"fallbackResourceIds\":[\"/subscriptions/46db4fa1-a60c-4cbd-be28-807c0c4ea04f/resourcegroups/rg-dlp-06082215/providers/microsoft.operationalinsights/workspaces/sentintel06082215\"],\"fromTemplateId\":\"sentinel-UserWorkbook\"}",
                "version": "1.0",
                "sourceId": "[parameters('workbookSourceId')]",
                "category": "[parameters('workbookType')]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'createCustomTables')]",
        "[resourceId('Microsoft.Web/sites', parameters('FunctionAppName'))]"
      ]
    },
    {
      "condition": "[equals(parameters('EnablePrivateNetworking'), true())]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "privateNetwork",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "FunctionAppName": {
            "value": "[parameters('FunctionAppName')]"
          },
          "KeyVaultId": {
            "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('KeyVaultName'))]"
          },
          "location": {
            "value": "[variables('location')]"
          },
          "StorageAccountId": {
            "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('StorageAccountName'))]"
          },
          "StorageAccountName": {
            "value": "[parameters('StorageAccountName')]"
          },
          "KeyVaultName": {
            "value": "[parameters('KeyVaultName')]"
          },
          "PrivateNetworkAddressSpace": {
            "value": "[parameters('PrivateNetworkAddressSpace')]"
          },
          "FunctionAppSubnet": {
            "value": "[parameters('FunctionAppSubnet')]"
          },
          "PrivateEndpointsSubnet": {
            "value": "[parameters('PrivateEndpointsSubnet')]"
          },
          "PrincipalId": {
            "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName'))), '2022-01-31-preview').principalId]"
          },
          "DeployCode": {
            "value": "[parameters('DeployFunctionCode')]"
          },
          "EnableElasticPremiumPlan": {
            "value": "[parameters('EnableElasticPremiumPlan')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "74183857894748240"
            }
          },
          "parameters": {
            "PrivateNetworkAddressSpace": {
              "type": "string"
            },
            "PrivateEndpointsSubnet": {
              "type": "string"
            },
            "FunctionAppSubnet": {
              "type": "string"
            },
            "FunctionAppName": {
              "type": "string"
            },
            "StorageAccountName": {
              "type": "string"
            },
            "StorageAccountId": {
              "type": "string"
            },
            "KeyVaultName": {
              "type": "string"
            },
            "KeyVaultId": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "PrincipalId": {
              "type": "string"
            },
            "DeployCode": {
              "type": "bool"
            },
            "EnableElasticPremiumPlan": {
              "type": "bool"
            }
          },
          "variables": {
            "roleIdOwner": "/providers/Microsoft.Authorization/roleDefinitions/8e3af657-a8ff-443c-a75c-2fe8c4bcb635"
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2022-07-01",
              "name": "[format('vnet-{0}', parameters('FunctionAppName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "[parameters('PrivateNetworkAddressSpace')]"
                  ]
                },
                "subnets": [
                  {
                    "name": "privateEndpoints",
                    "properties": {
                      "addressPrefix": "[parameters('PrivateEndpointsSubnet')]",
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'nsg-sentineldlp')]"
                      }
                    }
                  },
                  {
                    "name": "functionAppVnetIntegration",
                    "properties": {
                      "addressPrefix": "[parameters('FunctionAppSubnet')]",
                      "delegations": [
                        {
                          "name": "delegation",
                          "properties": {
                            "serviceName": "Microsoft.Web/serverFarms"
                          }
                        }
                      ],
                      "serviceEndpoints": "[if(equals(parameters('EnableElasticPremiumPlan'), true()), createArray(createObject('service', 'Microsoft.Storage')), createArray())]",
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'nsg-sentineldlp')]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', 'nsg-sentineldlp')]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2022-07-01",
              "name": "[format('pe-{0}', parameters('KeyVaultName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "subnet": {
                  "id": "[reference(resourceId('Microsoft.Network/virtualNetworks', format('vnet-{0}', parameters('FunctionAppName'))), '2022-07-01').subnets[0].id]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('pe-{0}', parameters('KeyVaultName'))]",
                    "properties": {
                      "privateLinkServiceId": "[parameters('KeyVaultId')]",
                      "groupIds": [
                        "vault"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', format('vnet-{0}', parameters('FunctionAppName')))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2022-07-01",
              "name": "[format('pe-blob-{0}', parameters('StorageAccountName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "subnet": {
                  "id": "[reference(resourceId('Microsoft.Network/virtualNetworks', format('vnet-{0}', parameters('FunctionAppName'))), '2022-07-01').subnets[0].id]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('pe-blob-{0}', parameters('StorageAccountName'))]",
                    "properties": {
                      "privateLinkServiceId": "[parameters('StorageAccountId')]",
                      "groupIds": [
                        "blob"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', format('vnet-{0}', parameters('FunctionAppName')))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2022-07-01",
              "name": "[format('pe-queue-{0}', parameters('StorageAccountName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "subnet": {
                  "id": "[reference(resourceId('Microsoft.Network/virtualNetworks', format('vnet-{0}', parameters('FunctionAppName'))), '2022-07-01').subnets[0].id]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('pe-queue-{0}', parameters('StorageAccountName'))]",
                    "properties": {
                      "privateLinkServiceId": "[parameters('StorageAccountId')]",
                      "groupIds": [
                        "queue"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', format('vnet-{0}', parameters('FunctionAppName')))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2022-07-01",
              "name": "[format('pe-file-{0}', parameters('StorageAccountName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "subnet": {
                  "id": "[reference(resourceId('Microsoft.Network/virtualNetworks', format('vnet-{0}', parameters('FunctionAppName'))), '2022-07-01').subnets[0].id]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('pe-file-{0}', parameters('StorageAccountName'))]",
                    "properties": {
                      "privateLinkServiceId": "[parameters('StorageAccountId')]",
                      "groupIds": [
                        "file"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', format('vnet-{0}', parameters('FunctionAppName')))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[format('privatelink.blob.{0}', environment().suffixes.storage)]",
              "location": "global",
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', format('vnet-{0}', parameters('FunctionAppName')))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[format('privatelink.file.{0}', environment().suffixes.storage)]",
              "location": "global",
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', format('vnet-{0}', parameters('FunctionAppName')))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[format('privatelink.queue.{0}', environment().suffixes.storage)]",
              "location": "global",
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', format('vnet-{0}', parameters('FunctionAppName')))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "privatelink.vaultcore.azure.net",
              "location": "global",
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', format('vnet-{0}', parameters('FunctionAppName')))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', format('privatelink.blob.{0}', environment().suffixes.storage), format('{0}-link', format('privatelink.blob.{0}', environment().suffixes.storage)))]",
              "location": "global",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks', format('vnet-{0}', parameters('FunctionAppName')))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', format('privatelink.blob.{0}', environment().suffixes.storage))]",
                "[resourceId('Microsoft.Network/virtualNetworks', format('vnet-{0}', parameters('FunctionAppName')))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', format('privatelink.file.{0}', environment().suffixes.storage), format('{0}-link', format('privatelink.file.{0}', environment().suffixes.storage)))]",
              "location": "global",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks', format('vnet-{0}', parameters('FunctionAppName')))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', format('privatelink.file.{0}', environment().suffixes.storage))]",
                "[resourceId('Microsoft.Network/virtualNetworks', format('vnet-{0}', parameters('FunctionAppName')))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', format('privatelink.queue.{0}', environment().suffixes.storage), format('{0}-link', format('privatelink.queue.{0}', environment().suffixes.storage)))]",
              "location": "global",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks', format('vnet-{0}', parameters('FunctionAppName')))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', format('privatelink.queue.{0}', environment().suffixes.storage))]",
                "[resourceId('Microsoft.Network/virtualNetworks', format('vnet-{0}', parameters('FunctionAppName')))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', 'privatelink.vaultcore.azure.net', format('{0}-link', 'privatelink.vaultcore.azure.net'))]",
              "location": "global",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks', format('vnet-{0}', parameters('FunctionAppName')))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.vaultcore.azure.net')]",
                "[resourceId('Microsoft.Network/virtualNetworks', format('vnet-{0}', parameters('FunctionAppName')))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/dnsGroup', format('pe-blob-{0}', parameters('StorageAccountName')))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "config1",
                    "properties": {
                      "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', format('privatelink.blob.{0}', environment().suffixes.storage))]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('pe-blob-{0}', parameters('StorageAccountName')))]",
                "[resourceId('Microsoft.Network/privateDnsZones', format('privatelink.blob.{0}', environment().suffixes.storage))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/dnsGroup', format('pe-file-{0}', parameters('StorageAccountName')))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "config1",
                    "properties": {
                      "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', format('privatelink.file.{0}', environment().suffixes.storage))]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('pe-file-{0}', parameters('StorageAccountName')))]",
                "[resourceId('Microsoft.Network/privateDnsZones', format('privatelink.file.{0}', environment().suffixes.storage))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/dnsGroup', format('pe-queue-{0}', parameters('StorageAccountName')))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "config1",
                    "properties": {
                      "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', format('privatelink.queue.{0}', environment().suffixes.storage))]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('pe-queue-{0}', parameters('StorageAccountName')))]",
                "[resourceId('Microsoft.Network/privateDnsZones', format('privatelink.queue.{0}', environment().suffixes.storage))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/dnsGroup', format('pe-{0}', parameters('KeyVaultName')))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "config1",
                    "properties": {
                      "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.vaultcore.azure.net')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('pe-{0}', parameters('KeyVaultName')))]",
                "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.vaultcore.azure.net')]"
              ]
            },
            {
              "condition": "[equals(parameters('DeployCode'), true())]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Network/virtualNetworks/{0}', format('vnet-{0}', parameters('FunctionAppName')))]",
              "name": "[guid(subscription().id, resourceGroup().id, resourceId('Microsoft.Network/virtualNetworks', format('vnet-{0}', parameters('FunctionAppName'))))]",
              "properties": {
                "principalId": "[parameters('PrincipalId')]",
                "roleDefinitionId": "[variables('roleIdOwner')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', format('vnet-{0}', parameters('FunctionAppName')))]"
              ]
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2023-05-01",
              "name": "nsg-sentineldlp",
              "location": "[parameters('location')]"
            }
          ],
          "outputs": {
            "functionAppSubnetId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', format('vnet-{0}', parameters('FunctionAppName'))), '2022-07-01').subnets[1].id]"
            },
            "privateEndpointSubnetId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', format('vnet-{0}', parameters('FunctionAppName'))), '2022-07-01').subnets[0].id]"
            },
            "vnetId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks', format('vnet-{0}', parameters('FunctionAppName')))]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('KeyVaultName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('StorageAccountName'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName')))]"
      ]
    },
    {
      "condition": "[equals(parameters('EnablePrivateNetworking'), true())]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "functionAppPe",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[variables('location')]"
          },
          "FunctionAppId": {
            "value": "[resourceId('Microsoft.Web/sites', parameters('FunctionAppName'))]"
          },
          "FunctionAppName": {
            "value": "[parameters('FunctionAppName')]"
          },
          "PrivateEndpointSubnetId": "[if(equals(parameters('EnablePrivateNetworking'), true()), createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'privateNetwork'), '2022-09-01').outputs.privateEndpointSubnetId.value), createObject('value', null()))]",
          "VnetId": "[if(equals(parameters('EnablePrivateNetworking'), true()), createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'privateNetwork'), '2022-09-01').outputs.vnetId.value), createObject('value', null()))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "10535640027385574136"
            }
          },
          "parameters": {
            "FunctionAppName": {
              "type": "string"
            },
            "FunctionAppId": {
              "type": "string"
            },
            "PrivateEndpointSubnetId": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "VnetId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2022-07-01",
              "name": "[format('pe-{0}', parameters('FunctionAppName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('PrivateEndpointSubnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('pe-{0}', parameters('FunctionAppName'))]",
                    "properties": {
                      "privateLinkServiceId": "[parameters('FunctionAppId')]",
                      "groupIds": [
                        "sites"
                      ]
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "privatelink.azurewebsites.net",
              "location": "global"
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', 'privatelink.azurewebsites.net', format('{0}-link', 'privatelink.azurewebsites.net'))]",
              "location": "global",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[parameters('VnetId')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.azurewebsites.net')]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/dnsGroup', format('pe-{0}', parameters('FunctionAppName')))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "config1",
                    "properties": {
                      "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.azurewebsites.net')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('pe-{0}', parameters('FunctionAppName')))]",
                "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.azurewebsites.net')]"
              ]
            }
          ],
          "outputs": {
            "functionAppName": {
              "type": "string",
              "value": "[parameters('FunctionAppName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('FunctionAppName'))]",
        "[resourceId('Microsoft.Resources/deployments', 'privateNetwork')]"
      ]
    }
  ],
  "outputs": {
    "UserAssignedManagedIdentityPrincipalId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('uami-{0}', parameters('FunctionAppName'))), '2022-01-31-preview').principalId]"
    },
    "UserAssignedManagedIdentityPrincipalName": {
      "type": "string",
      "value": "[format('uami-{0}', parameters('FunctionAppName'))]"
    }
  }
}